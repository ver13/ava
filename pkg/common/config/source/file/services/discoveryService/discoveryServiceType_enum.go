// Code generated by go-enum
// DO NOT EDIT!

package discoveryService

import (
	"fmt"
	"strings"

	errorConfigAVA "github.com/ver13/ava/pkg/common/config/error"
	errorAVA "github.com/ver13/ava/pkg/common/error"
)

const (
	// DiscoveryServiceTypeEureka is a DiscoveryServiceType of type Eureka
	DiscoveryServiceTypeEureka DiscoveryServiceType = iota
	// DiscoveryServiceTypeConsul is a DiscoveryServiceType of type Consul
	DiscoveryServiceTypeConsul
	// DiscoveryServiceTypeMemory is a DiscoveryServiceType of type Memory
	DiscoveryServiceTypeMemory
	// DiscoveryServiceTypeKubernetes is a DiscoveryServiceType of type Kubernetes
	DiscoveryServiceTypeKubernetes
	// DiscoveryServiceTypeEtcd is a DiscoveryServiceType of type Etcd
	DiscoveryServiceTypeEtcd
	// DiscoveryServiceTypeGossip is a DiscoveryServiceType of type Gossip
	DiscoveryServiceTypeGossip
	// DiscoveryServiceTypeNATS is a DiscoveryServiceType of type NATS
	DiscoveryServiceTypeNATS
	// DiscoveryServiceTypeZookeeper is a DiscoveryServiceType of type Zookeeper
	DiscoveryServiceTypeZookeeper
	// DiscoveryServiceTypeUnknown is a DiscoveryServiceType of type Unknown
	DiscoveryServiceTypeUnknown
)

const _DiscoveryServiceTypeName = "EurekaConsulMemoryKubernetesEtcdGossipNATSZookeeperUnknown"

var _DiscoveryServiceTypeMap = map[DiscoveryServiceType]string{
	0: _DiscoveryServiceTypeName[0:6],
	1: _DiscoveryServiceTypeName[6:12],
	2: _DiscoveryServiceTypeName[12:18],
	3: _DiscoveryServiceTypeName[18:28],
	4: _DiscoveryServiceTypeName[28:32],
	5: _DiscoveryServiceTypeName[32:38],
	6: _DiscoveryServiceTypeName[38:42],
	7: _DiscoveryServiceTypeName[42:51],
	8: _DiscoveryServiceTypeName[51:58],
}

// String implements the Stringer interface.
func (x DiscoveryServiceType) String() string {
	if str, ok := _DiscoveryServiceTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DiscoveryServiceType(%d)", x)
}

var _DiscoveryServiceTypeValue = map[string]DiscoveryServiceType{
	_DiscoveryServiceTypeName[0:6]:                    0,
	strings.ToLower(_DiscoveryServiceTypeName[0:6]):   0,
	_DiscoveryServiceTypeName[6:12]:                   1,
	strings.ToLower(_DiscoveryServiceTypeName[6:12]):  1,
	_DiscoveryServiceTypeName[12:18]:                  2,
	strings.ToLower(_DiscoveryServiceTypeName[12:18]): 2,
	_DiscoveryServiceTypeName[18:28]:                  3,
	strings.ToLower(_DiscoveryServiceTypeName[18:28]): 3,
	_DiscoveryServiceTypeName[28:32]:                  4,
	strings.ToLower(_DiscoveryServiceTypeName[28:32]): 4,
	_DiscoveryServiceTypeName[32:38]:                  5,
	strings.ToLower(_DiscoveryServiceTypeName[32:38]): 5,
	_DiscoveryServiceTypeName[38:42]:                  6,
	strings.ToLower(_DiscoveryServiceTypeName[38:42]): 6,
	_DiscoveryServiceTypeName[42:51]:                  7,
	strings.ToLower(_DiscoveryServiceTypeName[42:51]): 7,
	_DiscoveryServiceTypeName[51:58]:                  8,
	strings.ToLower(_DiscoveryServiceTypeName[51:58]): 8,
}

// ParseDiscoveryServiceType attempts to convert a string to a DiscoveryServiceType
func ParseDiscoveryServiceType(name string) (DiscoveryServiceType, *errorAVA.Error) {
	if x, ok := _DiscoveryServiceTypeValue[name]; ok {
		return x, nil
	}
	return DiscoveryServiceTypeUnknown, errorConfigAVA.DiscoveryServiceUnknown(nil, fmt.Sprintf("%s is not a valid discovery service type.", name))
}

// MarshalText implements the text marshaller method
func (x DiscoveryServiceType) MarshalText() ([]byte, *errorAVA.Error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x DiscoveryServiceType) UnmarshalText(text []byte) (DiscoveryServiceType, *errorAVA.Error) {
	name := string(text)
	tmp, err := ParseDiscoveryServiceType(name)
	if err != nil {
		return DiscoveryServiceTypeUnknown, err
	}
	x = tmp
	return tmp, nil
}
