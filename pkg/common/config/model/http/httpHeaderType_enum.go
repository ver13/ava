// Code generated by go-enum
// DO NOT EDIT!

package http

import (
	"fmt"
	"strings"

	errorConfigAVA "github.com/ver13/ava/pkg/common/config/error"
	errorAVA "github.com/ver13/ava/pkg/common/error"
)

const (
	// HTTPHeaderTypeAll is a HTTPHeaderType of type All
	HTTPHeaderTypeAll HTTPHeaderType = iota
	// HTTPHeaderTypeWWWAuthenticate is a HTTPHeaderType of type WWW-Authenticate
	// Defines the authService method that should be used to access a resource.
	HTTPHeaderTypeWWWAuthenticate
	// HTTPHeaderTypeAuthorization is a HTTPHeaderType of type Authorization
	// Contains the credentials to authenticate a user-agent with a server.
	HTTPHeaderTypeAuthorization
	// HTTPHeaderTypeProxyAuthenticate is a HTTPHeaderType of type Proxy-Authenticate
	// Defines the authService method that should be used to access a resource behind a proxy server.
	HTTPHeaderTypeProxyAuthenticate
	// HTTPHeaderTypeProxyAuthorization is a HTTPHeaderType of type Proxy-Authorization
	// Contains the credentials to authenticate a user agent with a proxy server.
	HTTPHeaderTypeProxyAuthorization
	// HTTPHeaderTypeAge is a HTTPHeaderType of type Age
	// The time, in seconds, that the object has been in a proxy cache.
	HTTPHeaderTypeAge
	// HTTPHeaderTypeCacheControl is a HTTPHeaderType of type Cache-Control
	// Directives for caching mechanisms in both requests and responses.
	HTTPHeaderTypeCacheControl
	// HTTPHeaderTypeClearSiteData is a HTTPHeaderType of type Clear-Site-Data
	// Clears browsing data (e.g. cookies, storage, cache) associated with the requesting website.
	HTTPHeaderTypeClearSiteData
	// HTTPHeaderTypeExpires is a HTTPHeaderType of type Expires
	// The date/time after which the response is considered stale.
	HTTPHeaderTypeExpires
	// HTTPHeaderTypePragma is a HTTPHeaderType of type Pragma
	// Implementation-specific header that may have various effects anywhere along the request-response chain. Used for backwards compatibility with HTTP/1.0 caches where the Cache-Control header is not yet present.
	HTTPHeaderTypePragma
	// HTTPHeaderTypeWarning is a HTTPHeaderType of type Warning
	// General warning information about possible problems.
	HTTPHeaderTypeWarning
	// HTTPHeaderTypeAcceptCH is a HTTPHeaderType of type Accept-CH
	// Servers can advertise support for ClientI Hints using the Accept-CH header field or an equivalent HTML <meta> element with http-equiv attribute ([HTML5]).
	HTTPHeaderTypeAcceptCH
	// HTTPHeaderTypeAcceptCHLifetime is a HTTPHeaderType of type Accept-CH-Lifetime
	// Servers can ask the client to remember the set of ClientI Hints that the server supports for a specified period of time, to enable delivery of ClientI Hints on subsequent requests to the server’s origin ([RFC6454]).
	HTTPHeaderTypeAcceptCHLifetime
	// HTTPHeaderTypeEarlyData is a HTTPHeaderType of type Early-Data
	// Indicates that the request has been conveyed in early data.
	HTTPHeaderTypeEarlyData
	// HTTPHeaderTypeContentDPR is a HTTPHeaderType of type Content-DPR
	// A number that indicates the ratio between physical pixels over CSS pixels of the selected image response.
	HTTPHeaderTypeContentDPR
	// HTTPHeaderTypeDPR is a HTTPHeaderType of type DPR
	// A number that indicates the client’s current Device Pixel Ratio (DPR), which is the ratio of physical pixels over CSS pixels (Section 5.2 of [CSSVAL]) of the layout viewport (Section 9.1.1 of [CSS2]) on the device.
	HTTPHeaderTypeDPR
	// HTTPHeaderTypeDeviceMemory is a HTTPHeaderType of type Device-Memory
	// Technically a part of Device Memory api, this header represents an approximate amount of RAM client has.
	HTTPHeaderTypeDeviceMemory
	// HTTPHeaderTypeSaveData is a HTTPHeaderType of type Save-Data
	// A boolean that indicates the user agent's preference for reduced data usage.
	HTTPHeaderTypeSaveData
	// HTTPHeaderTypeViewportWidth is a HTTPHeaderType of type Viewport-Width
	// A number that indicates the layout viewport width in CSS pixels. The provided pixel value is a number rounded to the smallest following integer (i.e. ceiling value).
	HTTPHeaderTypeViewportWidth
	// HTTPHeaderTypeWidth is a HTTPHeaderType of type Width
	// The Width request header field is a number that indicates the desired resource width in physical pixels (i.e. intrinsic size of an image). The provided pixel value is a number rounded to the smallest following integer (i.e. ceiling value).
	HTTPHeaderTypeWidth
	// HTTPHeaderTypeLastModified is a HTTPHeaderType of type Last-Modified
	// The last modification date of the resource, used to compare several versions of the same resource. It is less accurate than ETag, but easier to calculate in some environments. Conditional requests using If-Modified-Since and If-Unmodified-Since use this value to change the behavior of the request.
	HTTPHeaderTypeLastModified
	// HTTPHeaderTypeETag is a HTTPHeaderType of type ETag
	// A unique string identifying the version of the resource. Conditional requests using If-Match and If-None-Match use this value to change the behavior of the request.
	HTTPHeaderTypeETag
	// HTTPHeaderTypeIfMatch is a HTTPHeaderType of type If-Match
	// Makes the request conditional, and applies the method only if the stored resource matches one of the given ETags.
	HTTPHeaderTypeIfMatch
	// HTTPHeaderTypeIfNoneMatch is a HTTPHeaderType of type If-None-Match
	// Makes the request conditional, and applies the method only if the stored resource doesn't match any of the given ETags. This is used to update caches (for safe requests), or to prevent to upload a new resource when one already exists.
	HTTPHeaderTypeIfNoneMatch
	// HTTPHeaderTypeIfModifiedSince is a HTTPHeaderType of type If-Modified-Since
	// Makes the request conditional, and expects the entity to be transmitted only if it has been modified after the given date. This is used to transmit data only when the cache is out of date.
	HTTPHeaderTypeIfModifiedSince
	// HTTPHeaderTypeIfUnmodifiedSince is a HTTPHeaderType of type If-Unmodified-Since
	// Makes the request conditional, and expects the entity to be transmitted only if it has not been modified after the given date. This ensures the coherence of a new fragment of a specific range with previous ones, or to implement an optimistic concurrency control system when modifying existing documents.
	HTTPHeaderTypeIfUnmodifiedSince
	// HTTPHeaderTypeVary is a HTTPHeaderType of type Vary
	// Determines how to match request headers to decide whether a cached response can be used rather than requesting a fresh one from the origin server.
	HTTPHeaderTypeVary
	// HTTPHeaderTypeConnection is a HTTPHeaderType of type Connection
	// Controls whether the network connection stays open after the current transaction finishes.
	HTTPHeaderTypeConnection
	// HTTPHeaderTypeKeepAlive is a HTTPHeaderType of type Keep-Alive
	// Controls how long a persistent connection should stay open.
	HTTPHeaderTypeKeepAlive
	// HTTPHeaderTypeAccept is a HTTPHeaderType of type Accept
	// Informs the server about the types of data that can be sent back.
	HTTPHeaderTypeAccept
	// HTTPHeaderTypeAcceptCharset is a HTTPHeaderType of type Accept-Charset
	// Which character encodings the client understands.
	HTTPHeaderTypeAcceptCharset
	// HTTPHeaderTypeAcceptEncoding is a HTTPHeaderType of type Accept-Encoding
	// The error algorithm, usually a compression algorithm, that can be used on the resource sent back.
	HTTPHeaderTypeAcceptEncoding
	// HTTPHeaderTypeAcceptLanguage is a HTTPHeaderType of type Accept-Language
	// Informs the server about the human language the server is expected to send back. This is a hint and is not necessarily under the full control of the user: the server should always pay attention not to override an explicit user choice (like selecting a language from a dropdown).
	HTTPHeaderTypeAcceptLanguage
	// HTTPHeaderTypeExpect is a HTTPHeaderType of type Expect
	// Indicates expectations that need to be fulfilled by the server to properly handle the request.
	HTTPHeaderTypeExpect
	// HTTPHeaderTypeMaxForwards is a HTTPHeaderType of type Max-Forwards
	HTTPHeaderTypeMaxForwards
	// HTTPHeaderTypeCookie is a HTTPHeaderType of type Cookie
	// Contains stored HTTP cookies previously sent by the server with the Set-Cookie header.
	HTTPHeaderTypeCookie
	// HTTPHeaderTypeSetCookie is a HTTPHeaderType of type Set-Cookie
	// Send cookies from the server to the user-agent.
	HTTPHeaderTypeSetCookie
	// HTTPHeaderTypeCookie2 is a HTTPHeaderType of type Cookie2
	// Contains an HTTP cookie previously sent by the server with the Set-Cookie2 header, but has been obsoleted. Use Cookie instead.
	HTTPHeaderTypeCookie2
	// HTTPHeaderTypeSetCookie2 is a HTTPHeaderType of type Set-Cookie2
	// Sends cookies from the server to the user-agent, but has been obsoleted. Use Set-Cookie instead.
	HTTPHeaderTypeSetCookie2
	// HTTPHeaderTypeAccessControlAllowOrigin is a HTTPHeaderType of type Access-Control-Allow-Origin
	// Indicates whether the response can be shared.
	HTTPHeaderTypeAccessControlAllowOrigin
	// HTTPHeaderTypeAccessControlAllowCredentials is a HTTPHeaderType of type Access-Control-Allow-Credentials
	// Indicates whether the response to the request can be exposed when the credentials flag is true.
	HTTPHeaderTypeAccessControlAllowCredentials
	// HTTPHeaderTypeAccessControlAllowHeaders is a HTTPHeaderType of type Access-Control-Allow-Headers
	// Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request.
	HTTPHeaderTypeAccessControlAllowHeaders
	// HTTPHeaderTypeAccessControlAllowMethods is a HTTPHeaderType of type Access-Control-Allow-Methods
	// Specifies the methods allowed when accessing the resource in response to a preflight request.
	HTTPHeaderTypeAccessControlAllowMethods
	// HTTPHeaderTypeAccessControlExposeHeaders is a HTTPHeaderType of type Access-Control-Expose-Headers
	// Indicates which headers can be exposed as part of the response by listing their names.
	HTTPHeaderTypeAccessControlExposeHeaders
	// HTTPHeaderTypeAccessControlMaxAge is a HTTPHeaderType of type Access-Control-Max-Age
	// Indicates how long the results of a preflight request can be cached.
	HTTPHeaderTypeAccessControlMaxAge
	// HTTPHeaderTypeAccessControlRequestHeaders is a HTTPHeaderType of type Access-Control-Request-Headers
	// Used when issuing a preflight request to let the server know which HTTP headers will be used when the actual request is made.
	HTTPHeaderTypeAccessControlRequestHeaders
	// HTTPHeaderTypeAccessControlRequestMethod is a HTTPHeaderType of type Access-Control-Request-Method
	// Used when issuing a preflight request to let the server know which HTTP method will be used when the actual request is made.
	HTTPHeaderTypeAccessControlRequestMethod
	// HTTPHeaderTypeOrigin is a HTTPHeaderType of type Origin
	// Indicates where a fetch originates from.
	HTTPHeaderTypeOrigin
	// HTTPHeaderTypeServiceIWorkerAllowed is a HTTPHeaderType of type ServiceI-Worker-Allowed
	// Used to remove the path restriction by including this header in the response of the ServiceI Worker script.
	HTTPHeaderTypeServiceIWorkerAllowed
	// HTTPHeaderTypeTimingAllowOrigin is a HTTPHeaderType of type Timing-Allow-Origin
	// Specifies origins that are allowed to see values of attributes retrieved via features of the Resource Timing api, which would otherwise be reported as zero due to cross-origin restrictions.
	HTTPHeaderTypeTimingAllowOrigin
	// HTTPHeaderTypeXPermittedCrossDomainPolicies is a HTTPHeaderType of type X-Permitted-Cross-Domain-Policies
	// Specifies if a cross-domain policy file (crossdomain.xml) is allowed. The file may define a policy to grant clients, such as Adobe's Flash Player, Adobe Acrobat, Microsoft Silverlight, or Apache Flex, permission to handle data across domains that would otherwise be restricted due to the Same-Origin Policy. See the Cross-domain Policy file Specification for more information.
	HTTPHeaderTypeXPermittedCrossDomainPolicies
	// HTTPHeaderTypeDNT is a HTTPHeaderType of type DNT
	// Expresses the user's tracking preference.
	HTTPHeaderTypeDNT
	// HTTPHeaderTypeTk is a HTTPHeaderType of type Tk
	// Indicates the tracking status of the corresponding response.
	HTTPHeaderTypeTk
	// HTTPHeaderTypeContentDisposition is a HTTPHeaderType of type Content-Disposition
	// Indicates if the resource transmitted should be displayed inline (default behavior without the header), or if it should be handled like a download and the browser should present a “Save As” dialog.
	HTTPHeaderTypeContentDisposition
	// HTTPHeaderTypeContentLength is a HTTPHeaderType of type Content-Length
	// The size of the resource, in decimal number of bytes.
	HTTPHeaderTypeContentLength
	// HTTPHeaderTypeContentType is a HTTPHeaderType of type Content-Type
	// Indicates the media type of the resource.
	HTTPHeaderTypeContentType
	// HTTPHeaderTypeContentEncoding is a HTTPHeaderType of type Content-Encoding
	// Used to specify the compression algorithm.
	HTTPHeaderTypeContentEncoding
	// HTTPHeaderTypeContentLanguage is a HTTPHeaderType of type Content-Language
	// Describes the human language(s) intended for the audience, so that it allows a user to differentiate according to the users' own preferred language.
	HTTPHeaderTypeContentLanguage
	// HTTPHeaderTypeContentLocation is a HTTPHeaderType of type Content-Location
	// Indicates an alternate location for the returned data.
	HTTPHeaderTypeContentLocation
	// HTTPHeaderTypeForwarded is a HTTPHeaderType of type Forwarded
	// Contains information from the client-facing side of proxy servers that is altered or lost when a proxy is involved in the path of the request.
	HTTPHeaderTypeForwarded
	// HTTPHeaderTypeXForwardedFor is a HTTPHeaderType of type X-Forwarded-For
	// Identifies the originating IP addresses of a client connecting to a web server through an HTTP proxy or a load balancer.
	HTTPHeaderTypeXForwardedFor
	// HTTPHeaderTypeXForwardedHost is a HTTPHeaderType of type X-Forwarded-Host
	// Identifies the original host requested that a client used to connect to your proxy or load balancer.
	HTTPHeaderTypeXForwardedHost
	// HTTPHeaderTypeXForwardedProto is a HTTPHeaderType of type X-Forwarded-Proto
	// Identifies the protocol (HTTP or HTTPS) that a client used to connect to your proxy or load balancer.
	HTTPHeaderTypeXForwardedProto
	// HTTPHeaderTypeVia is a HTTPHeaderType of type Via
	// Added by proxies, both forward and reverse proxies, and can appear in the request headers and the response headers.
	HTTPHeaderTypeVia
	// HTTPHeaderTypeLocation is a HTTPHeaderType of type Location
	// Indicates the url to redirect a page to.
	HTTPHeaderTypeLocation
	// HTTPHeaderTypeFrom is a HTTPHeaderType of type From
	// Contains an Internet email address for a human user who controls the requesting user agent.
	HTTPHeaderTypeFrom
	// HTTPHeaderTypeHost is a HTTPHeaderType of type Host
	// Specifies the domain name of the server (for virtual hosting), and (optionally) the TCP port number on which the server is listening.
	HTTPHeaderTypeHost
	// HTTPHeaderTypeReferer is a HTTPHeaderType of type Referer
	// The address of the previous web page from which a link to the currently requested page was followed.
	HTTPHeaderTypeReferer
	// HTTPHeaderTypeReferrerPolicy is a HTTPHeaderType of type Referrer-Policy
	// Governs which referrer information sent in the Referer header should be included with requests made.
	HTTPHeaderTypeReferrerPolicy
	// HTTPHeaderTypeUserAgent is a HTTPHeaderType of type User-Agent
	// Contains a characteristic string that allows the network protocol peers to identify the application type, operating system, software vendor or software version of the requesting software user agent. See also the Firefox user agent string reference.
	HTTPHeaderTypeUserAgent
	// HTTPHeaderTypeAllow is a HTTPHeaderType of type Allow
	// Lists the set of HTTP request methods support by a resource.
	HTTPHeaderTypeAllow
	// HTTPHeaderTypeServer is a HTTPHeaderType of type Server
	// Contains information about the software used by the origin server to handle the request.
	HTTPHeaderTypeServer
	// HTTPHeaderTypeAcceptRanges is a HTTPHeaderType of type Accept-Ranges
	// Indicates if the server supports range requests, and if so in which unit the range can be expressed.
	HTTPHeaderTypeAcceptRanges
	// HTTPHeaderTypeRange is a HTTPHeaderType of type Range
	// Indicates the part of a document that the server should return.
	HTTPHeaderTypeRange
	// HTTPHeaderTypeIfRange is a HTTPHeaderType of type If-Range
	// Creates a conditional range request that is only fulfilled if the given etag or date matches the remote resource. Used to prevent downloading two ranges from incompatible version of the resource.
	HTTPHeaderTypeIfRange
	// HTTPHeaderTypeContentRange is a HTTPHeaderType of type Content-Range
	// Indicates where in a full body message a partial message belongs.
	HTTPHeaderTypeContentRange
	// HTTPHeaderTypeCrossOriginOpenerPolicy is a HTTPHeaderType of type Cross-Origin-Opener-Policy
	// Prevents other domains from opening/controlling a window.
	HTTPHeaderTypeCrossOriginOpenerPolicy
	// HTTPHeaderTypeCrossOriginResourcePolicy is a HTTPHeaderType of type Cross-Origin-Resource-Policy
	// Prevents other domains from reading the response of the resources to which this header is applied.
	HTTPHeaderTypeCrossOriginResourcePolicy
	// HTTPHeaderTypeContentSecurityPolicy is a HTTPHeaderType of type Content-Security-Policy
	// Controls resources the user agent is allowed to load for a given page.
	HTTPHeaderTypeContentSecurityPolicy
	// HTTPHeaderTypeContentSecurityPolicyReportOnly is a HTTPHeaderType of type Content-Security-Policy-Report-Only
	// Allows web developers to experiment with policies by monitoring, but not enforcing, their effects. These violation reports consist of JSON documents sent via an HTTP POST request to the specified URI.
	HTTPHeaderTypeContentSecurityPolicyReportOnly
	// HTTPHeaderTypeExpectCT is a HTTPHeaderType of type Expect-CT
	// Allows sites to opt in to reporting and/or enforcement of Certificate Transparency requirements, which prevents the use of misissued certificates for that site from going unnoticed. When a site enables the Expect-CT header, they are requesting that Chrome check that any certificate for that site appears in public CT logs.
	HTTPHeaderTypeExpectCT
	// HTTPHeaderTypeFeaturePolicy is a HTTPHeaderType of type Feature-Policy
	// Provides a mechanism to allow and deny the use of browser features in its own frame, and in iframes that it embeds.
	HTTPHeaderTypeFeaturePolicy
	// HTTPHeaderTypePublicKeyPins is a HTTPHeaderType of type Public-Key-Pins
	// Associates a specific cryptographic public key with a certain web server to decrease the risk of MITM attacks with forged certificates.
	HTTPHeaderTypePublicKeyPins
	// HTTPHeaderTypePublicKeyPinsReportOnly is a HTTPHeaderType of type Public-Key-Pins-Report-Only
	// Sends reports to the report-uri specified in the header and does still allow clients to connect to the server even if the pinning is violated.
	HTTPHeaderTypePublicKeyPinsReportOnly
	// HTTPHeaderTypeStrictTransportSecurity is a HTTPHeaderType of type Strict-Transport-Security
	// Force communication using HTTPS instead of HTTP.
	HTTPHeaderTypeStrictTransportSecurity
	// HTTPHeaderTypeUpgradeInsecureRequests is a HTTPHeaderType of type Upgrade-Insecure-Requests
	// Sends a signal to the server expressing the client’s preference for an encrypted and authenticated response, and that it can successfully handle the upgrade-insecure-requests directive.
	HTTPHeaderTypeUpgradeInsecureRequests
	// HTTPHeaderTypeXContentTypeOptions is a HTTPHeaderType of type X-Content-Type-Options
	// Disables MIME sniffing and forces browser to use the type given in Content-Type.
	HTTPHeaderTypeXContentTypeOptions
	// HTTPHeaderTypeXDownloadOptions is a HTTPHeaderType of type X-Download-Options
	// Indicates that the browser (Internet Explorer) should not display the option to "Open" a file that has been downloaded from an application, to prevent phishing attacks as the file otherwise would gain access to execute in the context of the application.
	HTTPHeaderTypeXDownloadOptions
	// HTTPHeaderTypeXFrameOptions is a HTTPHeaderType of type X-Frame-Options
	// Indicates whether a browser should be allowed to render a page in a <frame>, <iframe>, <embed> or <object>.
	HTTPHeaderTypeXFrameOptions
	// HTTPHeaderTypeXPoweredBy is a HTTPHeaderType of type X-Powered-By
	// May be set by hosting environments or other frameworks and contains information about them while not providing any usefulness to the application or its visitors. Unset this header to avoid exposing potential vulnerabilities.
	HTTPHeaderTypeXPoweredBy
	// HTTPHeaderTypeXXSSProtection is a HTTPHeaderType of type X-XSS-Protection
	// Enables cross-site scripting filtering.
	HTTPHeaderTypeXXSSProtection
	// HTTPHeaderTypeLastEventID is a HTTPHeaderType of type Last-Event-ID
	HTTPHeaderTypeLastEventID
	// HTTPHeaderTypeNEL is a HTTPHeaderType of type NEL
	// Defines a mechanism that enables developers to declare a network error reporting policy.
	HTTPHeaderTypeNEL
	// HTTPHeaderTypePingFrom is a HTTPHeaderType of type Ping-From
	HTTPHeaderTypePingFrom
	// HTTPHeaderTypePingTo is a HTTPHeaderType of type Ping-To
	HTTPHeaderTypePingTo
	// HTTPHeaderTypeReportTo is a HTTPHeaderType of type Report-To
	// Used to specify a server endpoint for the browser to send warning and error reports to.
	HTTPHeaderTypeReportTo
	// HTTPHeaderTypeTransferEncoding is a HTTPHeaderType of type Transfer-Encoding
	// Specifies the form of error used to safely transfer the entity to the user.
	HTTPHeaderTypeTransferEncoding
	// HTTPHeaderTypeTE is a HTTPHeaderType of type TE
	// Specifies the transfer encodings the user agent is willing to accept.
	HTTPHeaderTypeTE
	// HTTPHeaderTypeTrailer is a HTTPHeaderType of type Trailer
	// Allows the sender to include additional fields at the end of chunked message.
	HTTPHeaderTypeTrailer
	// HTTPHeaderTypeSecWebSocketKey is a HTTPHeaderType of type Sec-WebSocket-Key
	HTTPHeaderTypeSecWebSocketKey
	// HTTPHeaderTypeSecWebSocketExtensions is a HTTPHeaderType of type Sec-WebSocket-Extensions
	HTTPHeaderTypeSecWebSocketExtensions
	// HTTPHeaderTypeSecWebSocketAccept is a HTTPHeaderType of type Sec-WebSocket-Accept
	HTTPHeaderTypeSecWebSocketAccept
	// HTTPHeaderTypeSecWebSocketProtocol is a HTTPHeaderType of type Sec-WebSocket-Protocol
	HTTPHeaderTypeSecWebSocketProtocol
	// HTTPHeaderTypeSecWebSocketVersion is a HTTPHeaderType of type Sec-WebSocket-Version
	HTTPHeaderTypeSecWebSocketVersion
	// HTTPHeaderTypeAcceptPushPolicy is a HTTPHeaderType of type Accept-Push-Policy
	// A client can express the desired push policy for a request by sending an Accept-Push-Policy header field in the request.
	HTTPHeaderTypeAcceptPushPolicy
	// HTTPHeaderTypeAcceptSignature is a HTTPHeaderType of type Accept-Signature
	// A client can send the Accept-Signature header field to indicate intention to take advantage of any available signatures and to indicate what kinds of signatures it supports.
	HTTPHeaderTypeAcceptSignature
	// HTTPHeaderTypeAltSvc is a HTTPHeaderType of type Alt-Svc
	// Used to list alternate ways to reach this stackMicroservices.
	HTTPHeaderTypeAltSvc
	// HTTPHeaderTypeDate is a HTTPHeaderType of type Date
	// Contains the date and time at which the message was originated.
	HTTPHeaderTypeDate
	// HTTPHeaderTypeLargeAllocation is a HTTPHeaderType of type Large-Allocation
	// Tells the browser that the page being loaded is going to want to perform a large allocation.
	HTTPHeaderTypeLargeAllocation
	// HTTPHeaderTypeLink is a HTTPHeaderType of type Link
	// The Link entity-header field provides a means for serialising one or more links in HTTP headers. It is semantically equivalent to the HTML <link> element.
	HTTPHeaderTypeLink
	// HTTPHeaderTypePushPolicy is a HTTPHeaderType of type Push-Policy
	// A Push-Policy defines the server behaviour regarding push when processing a request.
	HTTPHeaderTypePushPolicy
	// HTTPHeaderTypeRetryAfter is a HTTPHeaderType of type Retry-After
	// Indicates how long the user agent should wait before making a follow-up request.
	HTTPHeaderTypeRetryAfter
	// HTTPHeaderTypeSignature is a HTTPHeaderType of type Signature
	// The Signature header field conveys a list of signatures for an exchange, each one accompanied by information about how to determine the authority of and refresh that signature.
	HTTPHeaderTypeSignature
	// HTTPHeaderTypeSignedHeaders is a HTTPHeaderType of type Signed-Headers
	// The Signed-headers header field identifies an ordered list of response header fields to include in a signature.
	HTTPHeaderTypeSignedHeaders
	// HTTPHeaderTypeServerTiming is a HTTPHeaderType of type Server-Timing
	// Communicates one or more metricsService and descriptions for the given request-response cycle.
	HTTPHeaderTypeServerTiming
	// HTTPHeaderTypeSourceMap is a HTTPHeaderType of type SourceMap
	// Links generated code to a source map.
	HTTPHeaderTypeSourceMap
	// HTTPHeaderTypeUpgrade is a HTTPHeaderType of type Upgrade
	// The relevant RFC document for the Upgrade header field is RFC 7230, section 6.7. The standard establishes rules for upgrading or changing to a different protocol on the current client, server, transport protocol connection. For example, this header standard allows a client to change from HTTP 1.1 to HTTP 2.0, assuming the server decides to acknowledge and implement the Upgrade header field. Neither party is required to accept the terms specified in the Upgrade header field. It can be used in both client and server headers. If the Upgrade header field is specified, then the sender MUST also send the Connection header field with the upgrade option specified. For details on the Connection header field please see section 6.1 of the aforementioned RFC.
	HTTPHeaderTypeUpgrade
	// HTTPHeaderTypeXDNSPrefetchControl is a HTTPHeaderType of type X-DNS-Prefetch-Control
	// Controls DNS prefetching, a feature by which browsers proactively perform domain name resolution on both links that the user may choose to follow as well as URLs for items referenced by the document, including images, CSS, JavaScript, and so forth.
	HTTPHeaderTypeXDNSPrefetchControl
	// HTTPHeaderTypeXFirefoxSpdy is a HTTPHeaderType of type X-Firefox-Spdy
	HTTPHeaderTypeXFirefoxSpdy
	// HTTPHeaderTypeXPingback is a HTTPHeaderType of type X-Pingback
	HTTPHeaderTypeXPingback
	// HTTPHeaderTypeXRequestedWith is a HTTPHeaderType of type X-Requested-With
	HTTPHeaderTypeXRequestedWith
	// HTTPHeaderTypeXRobotsTag is a HTTPHeaderType of type X-Robots-Tag
	// Used to indicate how a web page is to be indexed within public search engine results. The header is effectively equivalent to <meta name="robots" content="...">.
	HTTPHeaderTypeXRobotsTag
	// HTTPHeaderTypeXUACompatible is a HTTPHeaderType of type X-UA-Compatible
	// Used by Internet Explorer to signal which document mode to use.
	HTTPHeaderTypeXUACompatible
	// HTTPHeaderTypeXCSRFToken is a HTTPHeaderType of type X-CSRF-Token
	// Used to prevent cross-site request forgery. Alternative header names are: X-CSRFToken and X-XSRF-TOKEN
	HTTPHeaderTypeXCSRFToken
	// HTTPHeaderTypeXUIDH is a HTTPHeaderType of type X-UIDH
	// Server-side deep packet insertion of a unique ID identifying customers of Verizon Wireless; also known as "perma-cookie" or "supercookie"
	HTTPHeaderTypeXUIDH
	// HTTPHeaderTypeXRequestID is a HTTPHeaderType of type X-Request-ID
	// Correlates HTTP requests between a client and server.
	HTTPHeaderTypeXRequestID
	// HTTPHeaderTypeXCorrelationID is a HTTPHeaderType of type X-Correlation-ID
	// Correlates HTTP requests between a client and server.
	HTTPHeaderTypeXCorrelationID
	// HTTPHeaderTypeProxyConnection is a HTTPHeaderType of type Proxy-Connection
	// Implemented as a misunderstanding of the HTTP specifications. Common because of mistakes in implementations of early HTTP versions. Has exactly the same functionality as standard Connection field.
	HTTPHeaderTypeProxyConnection
	// HTTPHeaderTypeXWapProfile is a HTTPHeaderType of type X-Wap-Profile
	// Links to an XML file on the Internet with a full description and details about the device currently connecting. In the example to the right is an XML file for an AT&T Samsung Galaxy S2.
	HTTPHeaderTypeXWapProfile
	// HTTPHeaderTypeXATTDeviceId is a HTTPHeaderType of type X-ATT-DeviceId
	// Allows easier parsing of the MakeModel/Firmware that is usually found in the User-Agent String of AT&T Devices
	HTTPHeaderTypeXATTDeviceId
	// HTTPHeaderTypeXHttpMethodOverride is a HTTPHeaderType of type X-Http-Method-Override
	// Requests a web application to override the method specified in the request (typically POST) with the method given in the header field (typically PUT or DELETE). This can be used when a user agent or firewall prevents PUT or DELETE methods from being sent directly (note that this is either a bug in the software component, which ought to be fixed, or an intentional configurationServiceI, in which case bypassing it may be the wrong thing to do).
	HTTPHeaderTypeXHttpMethodOverride
	// HTTPHeaderTypeFrontEndHttps is a HTTPHeaderType of type Front-End-Https
	// Non-standard header field used by Microsoft applications and load-balancers
	HTTPHeaderTypeFrontEndHttps
	// HTTPHeaderTypeUnknown is a HTTPHeaderType of type Unknown
	HTTPHeaderTypeUnknown
)

const _HTTPHeaderTypeName = "AllWWW-AuthenticateAuthorizationProxy-AuthenticateProxy-AuthorizationAgeCache-ControlClear-Site-DataExpiresPragmaWarningAccept-CHAccept-CH-LifetimeEarly-DataContent-DPRDPRDevice-MemorySave-DataViewport-WidthWidthLast-ModifiedETagIf-MatchIf-None-MatchIf-Modified-SinceIf-Unmodified-SinceVaryConnectionKeep-AliveAcceptAccept-CharsetAccept-encodingAccept-LanguageExpectMax-ForwardsCookieSet-CookieCookie2Set-Cookie2Access-Control-Allow-OriginAccess-Control-Allow-CredentialsAccess-Control-Allow-headersAccess-Control-Allow-MethodsAccess-Control-Expose-headersAccess-Control-Max-AgeAccess-Control-Request-headersAccess-Control-Request-methodOriginServiceI-Worker-AllowedTiming-Allow-OriginX-Permitted-Cross-Domain-PoliciesDNTTkContent-DispositionContent-LengthContent-TypeContent-encodingContent-LanguageContent-LocationForwardedX-Forwarded-ForX-Forwarded-hostX-Forwarded-ProtoViaLocationFromhostRefererReferrer-PolicyUser-AgentAllowServerAccept-RangesRangeIf-RangeContent-RangeCross-Origin-Opener-PolicyCross-Origin-Resource-PolicyContent-Security-PolicyContent-Security-Policy-Report-OnlyExpect-CTFeature-PolicyPublic-Key-PinsPublic-Key-Pins-Report-OnlyStrict-Transport-SecurityUpgrade-Insecure-RequestsX-Content-Type-OptionsX-Download-OptionsX-Frame-OptionsX-Powered-ByX-XSS-ProtectionLast-Event-IDNELPing-FromPing-ToReport-ToTransfer-encodingTETrailerSec-WebSocket-KeySec-WebSocket-ExtensionsSec-WebSocket-AcceptSec-WebSocket-ProtocolSec-WebSocket-versionAccept-Push-PolicyAccept-SignatureAlt-SvcDateLarge-AllocationLinkPush-PolicyRetry-AfterSignatureSigned-headersServer-TimingSourceMapUpgradeX-DNS-Prefetch-ControlX-Firefox-SpdyX-PingbackX-Requested-WithX-Robots-TagX-UA-CompatibleX-CSRF-TokenX-UIDHX-Request-IDX-Correlation-IDProxy-ConnectionX-Wap-ProfileX-ATT-DeviceIdX-Http-method-OverrideFront-End-HttpsUnknown"

var _HTTPHeaderTypeMap = map[HTTPHeaderType]string{
	0:   _HTTPHeaderTypeName[0:3],
	1:   _HTTPHeaderTypeName[3:19],
	2:   _HTTPHeaderTypeName[19:32],
	3:   _HTTPHeaderTypeName[32:50],
	4:   _HTTPHeaderTypeName[50:69],
	5:   _HTTPHeaderTypeName[69:72],
	6:   _HTTPHeaderTypeName[72:85],
	7:   _HTTPHeaderTypeName[85:100],
	8:   _HTTPHeaderTypeName[100:107],
	9:   _HTTPHeaderTypeName[107:113],
	10:  _HTTPHeaderTypeName[113:120],
	11:  _HTTPHeaderTypeName[120:129],
	12:  _HTTPHeaderTypeName[129:147],
	13:  _HTTPHeaderTypeName[147:157],
	14:  _HTTPHeaderTypeName[157:168],
	15:  _HTTPHeaderTypeName[168:171],
	16:  _HTTPHeaderTypeName[171:184],
	17:  _HTTPHeaderTypeName[184:193],
	18:  _HTTPHeaderTypeName[193:207],
	19:  _HTTPHeaderTypeName[207:212],
	20:  _HTTPHeaderTypeName[212:225],
	21:  _HTTPHeaderTypeName[225:229],
	22:  _HTTPHeaderTypeName[229:237],
	23:  _HTTPHeaderTypeName[237:250],
	24:  _HTTPHeaderTypeName[250:267],
	25:  _HTTPHeaderTypeName[267:286],
	26:  _HTTPHeaderTypeName[286:290],
	27:  _HTTPHeaderTypeName[290:300],
	28:  _HTTPHeaderTypeName[300:310],
	29:  _HTTPHeaderTypeName[310:316],
	30:  _HTTPHeaderTypeName[316:330],
	31:  _HTTPHeaderTypeName[330:345],
	32:  _HTTPHeaderTypeName[345:360],
	33:  _HTTPHeaderTypeName[360:366],
	34:  _HTTPHeaderTypeName[366:378],
	35:  _HTTPHeaderTypeName[378:384],
	36:  _HTTPHeaderTypeName[384:394],
	37:  _HTTPHeaderTypeName[394:401],
	38:  _HTTPHeaderTypeName[401:412],
	39:  _HTTPHeaderTypeName[412:439],
	40:  _HTTPHeaderTypeName[439:471],
	41:  _HTTPHeaderTypeName[471:499],
	42:  _HTTPHeaderTypeName[499:527],
	43:  _HTTPHeaderTypeName[527:556],
	44:  _HTTPHeaderTypeName[556:578],
	45:  _HTTPHeaderTypeName[578:608],
	46:  _HTTPHeaderTypeName[608:637],
	47:  _HTTPHeaderTypeName[637:643],
	48:  _HTTPHeaderTypeName[643:666],
	49:  _HTTPHeaderTypeName[666:685],
	50:  _HTTPHeaderTypeName[685:718],
	51:  _HTTPHeaderTypeName[718:721],
	52:  _HTTPHeaderTypeName[721:723],
	53:  _HTTPHeaderTypeName[723:742],
	54:  _HTTPHeaderTypeName[742:756],
	55:  _HTTPHeaderTypeName[756:768],
	56:  _HTTPHeaderTypeName[768:784],
	57:  _HTTPHeaderTypeName[784:800],
	58:  _HTTPHeaderTypeName[800:816],
	59:  _HTTPHeaderTypeName[816:825],
	60:  _HTTPHeaderTypeName[825:840],
	61:  _HTTPHeaderTypeName[840:856],
	62:  _HTTPHeaderTypeName[856:873],
	63:  _HTTPHeaderTypeName[873:876],
	64:  _HTTPHeaderTypeName[876:884],
	65:  _HTTPHeaderTypeName[884:888],
	66:  _HTTPHeaderTypeName[888:892],
	67:  _HTTPHeaderTypeName[892:899],
	68:  _HTTPHeaderTypeName[899:914],
	69:  _HTTPHeaderTypeName[914:924],
	70:  _HTTPHeaderTypeName[924:929],
	71:  _HTTPHeaderTypeName[929:935],
	72:  _HTTPHeaderTypeName[935:948],
	73:  _HTTPHeaderTypeName[948:953],
	74:  _HTTPHeaderTypeName[953:961],
	75:  _HTTPHeaderTypeName[961:974],
	76:  _HTTPHeaderTypeName[974:1000],
	77:  _HTTPHeaderTypeName[1000:1028],
	78:  _HTTPHeaderTypeName[1028:1051],
	79:  _HTTPHeaderTypeName[1051:1086],
	80:  _HTTPHeaderTypeName[1086:1095],
	81:  _HTTPHeaderTypeName[1095:1109],
	82:  _HTTPHeaderTypeName[1109:1124],
	83:  _HTTPHeaderTypeName[1124:1151],
	84:  _HTTPHeaderTypeName[1151:1176],
	85:  _HTTPHeaderTypeName[1176:1201],
	86:  _HTTPHeaderTypeName[1201:1223],
	87:  _HTTPHeaderTypeName[1223:1241],
	88:  _HTTPHeaderTypeName[1241:1256],
	89:  _HTTPHeaderTypeName[1256:1268],
	90:  _HTTPHeaderTypeName[1268:1284],
	91:  _HTTPHeaderTypeName[1284:1297],
	92:  _HTTPHeaderTypeName[1297:1300],
	93:  _HTTPHeaderTypeName[1300:1309],
	94:  _HTTPHeaderTypeName[1309:1316],
	95:  _HTTPHeaderTypeName[1316:1325],
	96:  _HTTPHeaderTypeName[1325:1342],
	97:  _HTTPHeaderTypeName[1342:1344],
	98:  _HTTPHeaderTypeName[1344:1351],
	99:  _HTTPHeaderTypeName[1351:1368],
	100: _HTTPHeaderTypeName[1368:1392],
	101: _HTTPHeaderTypeName[1392:1412],
	102: _HTTPHeaderTypeName[1412:1434],
	103: _HTTPHeaderTypeName[1434:1455],
	104: _HTTPHeaderTypeName[1455:1473],
	105: _HTTPHeaderTypeName[1473:1489],
	106: _HTTPHeaderTypeName[1489:1496],
	107: _HTTPHeaderTypeName[1496:1500],
	108: _HTTPHeaderTypeName[1500:1516],
	109: _HTTPHeaderTypeName[1516:1520],
	110: _HTTPHeaderTypeName[1520:1531],
	111: _HTTPHeaderTypeName[1531:1542],
	112: _HTTPHeaderTypeName[1542:1551],
	113: _HTTPHeaderTypeName[1551:1565],
	114: _HTTPHeaderTypeName[1565:1578],
	115: _HTTPHeaderTypeName[1578:1587],
	116: _HTTPHeaderTypeName[1587:1594],
	117: _HTTPHeaderTypeName[1594:1616],
	118: _HTTPHeaderTypeName[1616:1630],
	119: _HTTPHeaderTypeName[1630:1640],
	120: _HTTPHeaderTypeName[1640:1656],
	121: _HTTPHeaderTypeName[1656:1668],
	122: _HTTPHeaderTypeName[1668:1683],
	123: _HTTPHeaderTypeName[1683:1695],
	124: _HTTPHeaderTypeName[1695:1701],
	125: _HTTPHeaderTypeName[1701:1713],
	126: _HTTPHeaderTypeName[1713:1729],
	127: _HTTPHeaderTypeName[1729:1745],
	128: _HTTPHeaderTypeName[1745:1758],
	129: _HTTPHeaderTypeName[1758:1772],
	130: _HTTPHeaderTypeName[1772:1794],
	131: _HTTPHeaderTypeName[1794:1809],
	132: _HTTPHeaderTypeName[1809:1816],
}

// String implements the Stringer interface.
func (x HTTPHeaderType) String() string {
	if str, ok := _HTTPHeaderTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("HTTPHeaderType(%d)", x)
}

var _HTTPHeaderTypeValue = map[string]HTTPHeaderType{
	_HTTPHeaderTypeName[0:3]:                        0,
	strings.ToLower(_HTTPHeaderTypeName[0:3]):       0,
	_HTTPHeaderTypeName[3:19]:                       1,
	strings.ToLower(_HTTPHeaderTypeName[3:19]):      1,
	_HTTPHeaderTypeName[19:32]:                      2,
	strings.ToLower(_HTTPHeaderTypeName[19:32]):     2,
	_HTTPHeaderTypeName[32:50]:                      3,
	strings.ToLower(_HTTPHeaderTypeName[32:50]):     3,
	_HTTPHeaderTypeName[50:69]:                      4,
	strings.ToLower(_HTTPHeaderTypeName[50:69]):     4,
	_HTTPHeaderTypeName[69:72]:                      5,
	strings.ToLower(_HTTPHeaderTypeName[69:72]):     5,
	_HTTPHeaderTypeName[72:85]:                      6,
	strings.ToLower(_HTTPHeaderTypeName[72:85]):     6,
	_HTTPHeaderTypeName[85:100]:                     7,
	strings.ToLower(_HTTPHeaderTypeName[85:100]):    7,
	_HTTPHeaderTypeName[100:107]:                    8,
	strings.ToLower(_HTTPHeaderTypeName[100:107]):   8,
	_HTTPHeaderTypeName[107:113]:                    9,
	strings.ToLower(_HTTPHeaderTypeName[107:113]):   9,
	_HTTPHeaderTypeName[113:120]:                    10,
	strings.ToLower(_HTTPHeaderTypeName[113:120]):   10,
	_HTTPHeaderTypeName[120:129]:                    11,
	strings.ToLower(_HTTPHeaderTypeName[120:129]):   11,
	_HTTPHeaderTypeName[129:147]:                    12,
	strings.ToLower(_HTTPHeaderTypeName[129:147]):   12,
	_HTTPHeaderTypeName[147:157]:                    13,
	strings.ToLower(_HTTPHeaderTypeName[147:157]):   13,
	_HTTPHeaderTypeName[157:168]:                    14,
	strings.ToLower(_HTTPHeaderTypeName[157:168]):   14,
	_HTTPHeaderTypeName[168:171]:                    15,
	strings.ToLower(_HTTPHeaderTypeName[168:171]):   15,
	_HTTPHeaderTypeName[171:184]:                    16,
	strings.ToLower(_HTTPHeaderTypeName[171:184]):   16,
	_HTTPHeaderTypeName[184:193]:                    17,
	strings.ToLower(_HTTPHeaderTypeName[184:193]):   17,
	_HTTPHeaderTypeName[193:207]:                    18,
	strings.ToLower(_HTTPHeaderTypeName[193:207]):   18,
	_HTTPHeaderTypeName[207:212]:                    19,
	strings.ToLower(_HTTPHeaderTypeName[207:212]):   19,
	_HTTPHeaderTypeName[212:225]:                    20,
	strings.ToLower(_HTTPHeaderTypeName[212:225]):   20,
	_HTTPHeaderTypeName[225:229]:                    21,
	strings.ToLower(_HTTPHeaderTypeName[225:229]):   21,
	_HTTPHeaderTypeName[229:237]:                    22,
	strings.ToLower(_HTTPHeaderTypeName[229:237]):   22,
	_HTTPHeaderTypeName[237:250]:                    23,
	strings.ToLower(_HTTPHeaderTypeName[237:250]):   23,
	_HTTPHeaderTypeName[250:267]:                    24,
	strings.ToLower(_HTTPHeaderTypeName[250:267]):   24,
	_HTTPHeaderTypeName[267:286]:                    25,
	strings.ToLower(_HTTPHeaderTypeName[267:286]):   25,
	_HTTPHeaderTypeName[286:290]:                    26,
	strings.ToLower(_HTTPHeaderTypeName[286:290]):   26,
	_HTTPHeaderTypeName[290:300]:                    27,
	strings.ToLower(_HTTPHeaderTypeName[290:300]):   27,
	_HTTPHeaderTypeName[300:310]:                    28,
	strings.ToLower(_HTTPHeaderTypeName[300:310]):   28,
	_HTTPHeaderTypeName[310:316]:                    29,
	strings.ToLower(_HTTPHeaderTypeName[310:316]):   29,
	_HTTPHeaderTypeName[316:330]:                    30,
	strings.ToLower(_HTTPHeaderTypeName[316:330]):   30,
	_HTTPHeaderTypeName[330:345]:                    31,
	strings.ToLower(_HTTPHeaderTypeName[330:345]):   31,
	_HTTPHeaderTypeName[345:360]:                    32,
	strings.ToLower(_HTTPHeaderTypeName[345:360]):   32,
	_HTTPHeaderTypeName[360:366]:                    33,
	strings.ToLower(_HTTPHeaderTypeName[360:366]):   33,
	_HTTPHeaderTypeName[366:378]:                    34,
	strings.ToLower(_HTTPHeaderTypeName[366:378]):   34,
	_HTTPHeaderTypeName[378:384]:                    35,
	strings.ToLower(_HTTPHeaderTypeName[378:384]):   35,
	_HTTPHeaderTypeName[384:394]:                    36,
	strings.ToLower(_HTTPHeaderTypeName[384:394]):   36,
	_HTTPHeaderTypeName[394:401]:                    37,
	strings.ToLower(_HTTPHeaderTypeName[394:401]):   37,
	_HTTPHeaderTypeName[401:412]:                    38,
	strings.ToLower(_HTTPHeaderTypeName[401:412]):   38,
	_HTTPHeaderTypeName[412:439]:                    39,
	strings.ToLower(_HTTPHeaderTypeName[412:439]):   39,
	_HTTPHeaderTypeName[439:471]:                    40,
	strings.ToLower(_HTTPHeaderTypeName[439:471]):   40,
	_HTTPHeaderTypeName[471:499]:                    41,
	strings.ToLower(_HTTPHeaderTypeName[471:499]):   41,
	_HTTPHeaderTypeName[499:527]:                    42,
	strings.ToLower(_HTTPHeaderTypeName[499:527]):   42,
	_HTTPHeaderTypeName[527:556]:                    43,
	strings.ToLower(_HTTPHeaderTypeName[527:556]):   43,
	_HTTPHeaderTypeName[556:578]:                    44,
	strings.ToLower(_HTTPHeaderTypeName[556:578]):   44,
	_HTTPHeaderTypeName[578:608]:                    45,
	strings.ToLower(_HTTPHeaderTypeName[578:608]):   45,
	_HTTPHeaderTypeName[608:637]:                    46,
	strings.ToLower(_HTTPHeaderTypeName[608:637]):   46,
	_HTTPHeaderTypeName[637:643]:                    47,
	strings.ToLower(_HTTPHeaderTypeName[637:643]):   47,
	_HTTPHeaderTypeName[643:666]:                    48,
	strings.ToLower(_HTTPHeaderTypeName[643:666]):   48,
	_HTTPHeaderTypeName[666:685]:                    49,
	strings.ToLower(_HTTPHeaderTypeName[666:685]):   49,
	_HTTPHeaderTypeName[685:718]:                    50,
	strings.ToLower(_HTTPHeaderTypeName[685:718]):   50,
	_HTTPHeaderTypeName[718:721]:                    51,
	strings.ToLower(_HTTPHeaderTypeName[718:721]):   51,
	_HTTPHeaderTypeName[721:723]:                    52,
	strings.ToLower(_HTTPHeaderTypeName[721:723]):   52,
	_HTTPHeaderTypeName[723:742]:                    53,
	strings.ToLower(_HTTPHeaderTypeName[723:742]):   53,
	_HTTPHeaderTypeName[742:756]:                    54,
	strings.ToLower(_HTTPHeaderTypeName[742:756]):   54,
	_HTTPHeaderTypeName[756:768]:                    55,
	strings.ToLower(_HTTPHeaderTypeName[756:768]):   55,
	_HTTPHeaderTypeName[768:784]:                    56,
	strings.ToLower(_HTTPHeaderTypeName[768:784]):   56,
	_HTTPHeaderTypeName[784:800]:                    57,
	strings.ToLower(_HTTPHeaderTypeName[784:800]):   57,
	_HTTPHeaderTypeName[800:816]:                    58,
	strings.ToLower(_HTTPHeaderTypeName[800:816]):   58,
	_HTTPHeaderTypeName[816:825]:                    59,
	strings.ToLower(_HTTPHeaderTypeName[816:825]):   59,
	_HTTPHeaderTypeName[825:840]:                    60,
	strings.ToLower(_HTTPHeaderTypeName[825:840]):   60,
	_HTTPHeaderTypeName[840:856]:                    61,
	strings.ToLower(_HTTPHeaderTypeName[840:856]):   61,
	_HTTPHeaderTypeName[856:873]:                    62,
	strings.ToLower(_HTTPHeaderTypeName[856:873]):   62,
	_HTTPHeaderTypeName[873:876]:                    63,
	strings.ToLower(_HTTPHeaderTypeName[873:876]):   63,
	_HTTPHeaderTypeName[876:884]:                    64,
	strings.ToLower(_HTTPHeaderTypeName[876:884]):   64,
	_HTTPHeaderTypeName[884:888]:                    65,
	strings.ToLower(_HTTPHeaderTypeName[884:888]):   65,
	_HTTPHeaderTypeName[888:892]:                    66,
	strings.ToLower(_HTTPHeaderTypeName[888:892]):   66,
	_HTTPHeaderTypeName[892:899]:                    67,
	strings.ToLower(_HTTPHeaderTypeName[892:899]):   67,
	_HTTPHeaderTypeName[899:914]:                    68,
	strings.ToLower(_HTTPHeaderTypeName[899:914]):   68,
	_HTTPHeaderTypeName[914:924]:                    69,
	strings.ToLower(_HTTPHeaderTypeName[914:924]):   69,
	_HTTPHeaderTypeName[924:929]:                    70,
	strings.ToLower(_HTTPHeaderTypeName[924:929]):   70,
	_HTTPHeaderTypeName[929:935]:                    71,
	strings.ToLower(_HTTPHeaderTypeName[929:935]):   71,
	_HTTPHeaderTypeName[935:948]:                    72,
	strings.ToLower(_HTTPHeaderTypeName[935:948]):   72,
	_HTTPHeaderTypeName[948:953]:                    73,
	strings.ToLower(_HTTPHeaderTypeName[948:953]):   73,
	_HTTPHeaderTypeName[953:961]:                    74,
	strings.ToLower(_HTTPHeaderTypeName[953:961]):   74,
	_HTTPHeaderTypeName[961:974]:                    75,
	strings.ToLower(_HTTPHeaderTypeName[961:974]):   75,
	_HTTPHeaderTypeName[974:1000]:                   76,
	strings.ToLower(_HTTPHeaderTypeName[974:1000]):  76,
	_HTTPHeaderTypeName[1000:1028]:                  77,
	strings.ToLower(_HTTPHeaderTypeName[1000:1028]): 77,
	_HTTPHeaderTypeName[1028:1051]:                  78,
	strings.ToLower(_HTTPHeaderTypeName[1028:1051]): 78,
	_HTTPHeaderTypeName[1051:1086]:                  79,
	strings.ToLower(_HTTPHeaderTypeName[1051:1086]): 79,
	_HTTPHeaderTypeName[1086:1095]:                  80,
	strings.ToLower(_HTTPHeaderTypeName[1086:1095]): 80,
	_HTTPHeaderTypeName[1095:1109]:                  81,
	strings.ToLower(_HTTPHeaderTypeName[1095:1109]): 81,
	_HTTPHeaderTypeName[1109:1124]:                  82,
	strings.ToLower(_HTTPHeaderTypeName[1109:1124]): 82,
	_HTTPHeaderTypeName[1124:1151]:                  83,
	strings.ToLower(_HTTPHeaderTypeName[1124:1151]): 83,
	_HTTPHeaderTypeName[1151:1176]:                  84,
	strings.ToLower(_HTTPHeaderTypeName[1151:1176]): 84,
	_HTTPHeaderTypeName[1176:1201]:                  85,
	strings.ToLower(_HTTPHeaderTypeName[1176:1201]): 85,
	_HTTPHeaderTypeName[1201:1223]:                  86,
	strings.ToLower(_HTTPHeaderTypeName[1201:1223]): 86,
	_HTTPHeaderTypeName[1223:1241]:                  87,
	strings.ToLower(_HTTPHeaderTypeName[1223:1241]): 87,
	_HTTPHeaderTypeName[1241:1256]:                  88,
	strings.ToLower(_HTTPHeaderTypeName[1241:1256]): 88,
	_HTTPHeaderTypeName[1256:1268]:                  89,
	strings.ToLower(_HTTPHeaderTypeName[1256:1268]): 89,
	_HTTPHeaderTypeName[1268:1284]:                  90,
	strings.ToLower(_HTTPHeaderTypeName[1268:1284]): 90,
	_HTTPHeaderTypeName[1284:1297]:                  91,
	strings.ToLower(_HTTPHeaderTypeName[1284:1297]): 91,
	_HTTPHeaderTypeName[1297:1300]:                  92,
	strings.ToLower(_HTTPHeaderTypeName[1297:1300]): 92,
	_HTTPHeaderTypeName[1300:1309]:                  93,
	strings.ToLower(_HTTPHeaderTypeName[1300:1309]): 93,
	_HTTPHeaderTypeName[1309:1316]:                  94,
	strings.ToLower(_HTTPHeaderTypeName[1309:1316]): 94,
	_HTTPHeaderTypeName[1316:1325]:                  95,
	strings.ToLower(_HTTPHeaderTypeName[1316:1325]): 95,
	_HTTPHeaderTypeName[1325:1342]:                  96,
	strings.ToLower(_HTTPHeaderTypeName[1325:1342]): 96,
	_HTTPHeaderTypeName[1342:1344]:                  97,
	strings.ToLower(_HTTPHeaderTypeName[1342:1344]): 97,
	_HTTPHeaderTypeName[1344:1351]:                  98,
	strings.ToLower(_HTTPHeaderTypeName[1344:1351]): 98,
	_HTTPHeaderTypeName[1351:1368]:                  99,
	strings.ToLower(_HTTPHeaderTypeName[1351:1368]): 99,
	_HTTPHeaderTypeName[1368:1392]:                  100,
	strings.ToLower(_HTTPHeaderTypeName[1368:1392]): 100,
	_HTTPHeaderTypeName[1392:1412]:                  101,
	strings.ToLower(_HTTPHeaderTypeName[1392:1412]): 101,
	_HTTPHeaderTypeName[1412:1434]:                  102,
	strings.ToLower(_HTTPHeaderTypeName[1412:1434]): 102,
	_HTTPHeaderTypeName[1434:1455]:                  103,
	strings.ToLower(_HTTPHeaderTypeName[1434:1455]): 103,
	_HTTPHeaderTypeName[1455:1473]:                  104,
	strings.ToLower(_HTTPHeaderTypeName[1455:1473]): 104,
	_HTTPHeaderTypeName[1473:1489]:                  105,
	strings.ToLower(_HTTPHeaderTypeName[1473:1489]): 105,
	_HTTPHeaderTypeName[1489:1496]:                  106,
	strings.ToLower(_HTTPHeaderTypeName[1489:1496]): 106,
	_HTTPHeaderTypeName[1496:1500]:                  107,
	strings.ToLower(_HTTPHeaderTypeName[1496:1500]): 107,
	_HTTPHeaderTypeName[1500:1516]:                  108,
	strings.ToLower(_HTTPHeaderTypeName[1500:1516]): 108,
	_HTTPHeaderTypeName[1516:1520]:                  109,
	strings.ToLower(_HTTPHeaderTypeName[1516:1520]): 109,
	_HTTPHeaderTypeName[1520:1531]:                  110,
	strings.ToLower(_HTTPHeaderTypeName[1520:1531]): 110,
	_HTTPHeaderTypeName[1531:1542]:                  111,
	strings.ToLower(_HTTPHeaderTypeName[1531:1542]): 111,
	_HTTPHeaderTypeName[1542:1551]:                  112,
	strings.ToLower(_HTTPHeaderTypeName[1542:1551]): 112,
	_HTTPHeaderTypeName[1551:1565]:                  113,
	strings.ToLower(_HTTPHeaderTypeName[1551:1565]): 113,
	_HTTPHeaderTypeName[1565:1578]:                  114,
	strings.ToLower(_HTTPHeaderTypeName[1565:1578]): 114,
	_HTTPHeaderTypeName[1578:1587]:                  115,
	strings.ToLower(_HTTPHeaderTypeName[1578:1587]): 115,
	_HTTPHeaderTypeName[1587:1594]:                  116,
	strings.ToLower(_HTTPHeaderTypeName[1587:1594]): 116,
	_HTTPHeaderTypeName[1594:1616]:                  117,
	strings.ToLower(_HTTPHeaderTypeName[1594:1616]): 117,
	_HTTPHeaderTypeName[1616:1630]:                  118,
	strings.ToLower(_HTTPHeaderTypeName[1616:1630]): 118,
	_HTTPHeaderTypeName[1630:1640]:                  119,
	strings.ToLower(_HTTPHeaderTypeName[1630:1640]): 119,
	_HTTPHeaderTypeName[1640:1656]:                  120,
	strings.ToLower(_HTTPHeaderTypeName[1640:1656]): 120,
	_HTTPHeaderTypeName[1656:1668]:                  121,
	strings.ToLower(_HTTPHeaderTypeName[1656:1668]): 121,
	_HTTPHeaderTypeName[1668:1683]:                  122,
	strings.ToLower(_HTTPHeaderTypeName[1668:1683]): 122,
	_HTTPHeaderTypeName[1683:1695]:                  123,
	strings.ToLower(_HTTPHeaderTypeName[1683:1695]): 123,
	_HTTPHeaderTypeName[1695:1701]:                  124,
	strings.ToLower(_HTTPHeaderTypeName[1695:1701]): 124,
	_HTTPHeaderTypeName[1701:1713]:                  125,
	strings.ToLower(_HTTPHeaderTypeName[1701:1713]): 125,
	_HTTPHeaderTypeName[1713:1729]:                  126,
	strings.ToLower(_HTTPHeaderTypeName[1713:1729]): 126,
	_HTTPHeaderTypeName[1729:1745]:                  127,
	strings.ToLower(_HTTPHeaderTypeName[1729:1745]): 127,
	_HTTPHeaderTypeName[1745:1758]:                  128,
	strings.ToLower(_HTTPHeaderTypeName[1745:1758]): 128,
	_HTTPHeaderTypeName[1758:1772]:                  129,
	strings.ToLower(_HTTPHeaderTypeName[1758:1772]): 129,
	_HTTPHeaderTypeName[1772:1794]:                  130,
	strings.ToLower(_HTTPHeaderTypeName[1772:1794]): 130,
	_HTTPHeaderTypeName[1794:1809]:                  131,
	strings.ToLower(_HTTPHeaderTypeName[1794:1809]): 131,
	_HTTPHeaderTypeName[1809:1816]:                  132,
	strings.ToLower(_HTTPHeaderTypeName[1809:1816]): 132,
}

// ParseHTTPHeaderType attempts to convert a string to a HTTPHeaderType
func ParseHTTPHeaderType(name string) (HTTPHeaderType, *errorAVA.Error) {
	if x, ok := _HTTPHeaderTypeValue[name]; ok {
		return x, nil
	}
	return HTTPHeaderTypeUnknown, errorConfigAVA.HTTPHeaderUnknown(nil, fmt.Sprintf("%s is not a valid HTTP header type.", name))
}

// MarshalText implements the text marshaller method
func (x HTTPHeaderType) MarshalText() ([]byte, *errorAVA.Error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x HTTPHeaderType) UnmarshalText(text []byte) (HTTPHeaderType, *errorAVA.Error) {
	name := string(text)
	tmp, err := ParseHTTPHeaderType(name)
	if err != nil {
		return HTTPHeaderTypeUnknown, err
	}
	x = tmp
	return tmp, nil
}
