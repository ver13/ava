// Code generated by go-enum
// DO NOT EDIT!

package http

import (
	"fmt"
	"strings"
)

const (
	// OutputEncodingTypeJSON is a OutputEncodingType of type JSON
	OutputEncodingTypeJSON OutputEncodingType = iota
	// OutputEncodingTypeXML is a OutputEncodingType of type XML
	OutputEncodingTypeXML
	// OutputEncodingTypeSTRING is a OutputEncodingType of type STRING
	OutputEncodingTypeSTRING
	// OutputEncodingTypeNOOP is a OutputEncodingType of type NOOP
	OutputEncodingTypeNOOP
	// OutputEncodingTypeUNKNOWN is a OutputEncodingType of type UNKNOWN
	OutputEncodingTypeUNKNOWN
)

const _OutputEncodingTypeName = "JSONXMLSTRINGNOOPUNKNOWN"

var _OutputEncodingTypeMap = map[OutputEncodingType]string{
	0: _OutputEncodingTypeName[0:4],
	1: _OutputEncodingTypeName[4:7],
	2: _OutputEncodingTypeName[7:13],
	3: _OutputEncodingTypeName[13:17],
	4: _OutputEncodingTypeName[17:24],
}

// String implements the Stringer interface.
func (x OutputEncodingType) String() string {
	if str, ok := _OutputEncodingTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("OutputEncodingType(%d)", x)
}

var _OutputEncodingTypeValue = map[string]OutputEncodingType{
	_OutputEncodingTypeName[0:4]:                    0,
	strings.ToLower(_OutputEncodingTypeName[0:4]):   0,
	_OutputEncodingTypeName[4:7]:                    1,
	strings.ToLower(_OutputEncodingTypeName[4:7]):   1,
	_OutputEncodingTypeName[7:13]:                   2,
	strings.ToLower(_OutputEncodingTypeName[7:13]):  2,
	_OutputEncodingTypeName[13:17]:                  3,
	strings.ToLower(_OutputEncodingTypeName[13:17]): 3,
	_OutputEncodingTypeName[17:24]:                  4,
	strings.ToLower(_OutputEncodingTypeName[17:24]): 4,
}

// ParseOutputEncodingType attempts to convert a string to a OutputEncodingType
func ParseOutputEncodingType(name string) (OutputEncodingType, error) {
	if x, ok := _OutputEncodingTypeValue[name]; ok {
		return x, nil
	}
	return OutputEncodingType(0), fmt.Errorf("%s is not a valid OutputEncodingType", name)
}

// MarshalText implements the text marshaller method
func (x *OutputEncodingType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *OutputEncodingType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseOutputEncodingType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
