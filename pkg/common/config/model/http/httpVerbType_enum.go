// Code generated by go-enum
// DO NOT EDIT!

package http

import (
	"fmt"
	"strings"
)

const (
	// HTTPVerbTypeGET is a HTTPVerbType of type GET
	// The GET method requests a representation of the specified resource. Requests using GET should only retrieve data.
	HTTPVerbTypeGET HTTPVerbType = iota
	// HTTPVerbTypeHEAD is a HTTPVerbType of type HEAD
	// The HEAD method asks for a response identical to that of a GET request, but without the response body.
	HTTPVerbTypeHEAD
	// HTTPVerbTypePOST is a HTTPVerbType of type POST
	// The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server.
	HTTPVerbTypePOST
	// HTTPVerbTypePUT is a HTTPVerbType of type PUT
	// The PUT method replaces all current representations of the target resource with the request payload.
	HTTPVerbTypePUT
	// HTTPVerbTypeDELETE is a HTTPVerbType of type DELETE
	// The DELETE method deletes the specified resource.
	HTTPVerbTypeDELETE
	// HTTPVerbTypeCONNECT is a HTTPVerbType of type CONNECT
	// The CONNECT method establishes a tunnel to the server identified by the target resource.
	HTTPVerbTypeCONNECT
	// HTTPVerbTypeOPTIONS is a HTTPVerbType of type OPTIONS
	// The OPTIONS method is used to describe the communication options for the target resource.
	HTTPVerbTypeOPTIONS
	// HTTPVerbTypeTRACE is a HTTPVerbType of type TRACE
	// The TRACE method performs a message loop-back test along the path to the target resource.
	HTTPVerbTypeTRACE
	// HTTPVerbTypePATCH is a HTTPVerbType of type PATCH
	// The PATCH method is used to apply partial modifications to a resource.
	HTTPVerbTypePATCH
	// HTTPVerbTypeUNKNOWN is a HTTPVerbType of type UNKNOWN
	HTTPVerbTypeUNKNOWN
	// HTTPVerbTypeGmfMethod is a HTTPVerbType of type Gmf-Method
	HTTPVerbTypeGmfMethod
)

const _HTTPVerbTypeName = "GETHEADPOSTPUTDELETECONNECTOPTIONSTRACEPATCHUNKNOWNGmf-method"

var _HTTPVerbTypeMap = map[HTTPVerbType]string{
	0:  _HTTPVerbTypeName[0:3],
	1:  _HTTPVerbTypeName[3:7],
	2:  _HTTPVerbTypeName[7:11],
	3:  _HTTPVerbTypeName[11:14],
	4:  _HTTPVerbTypeName[14:20],
	5:  _HTTPVerbTypeName[20:27],
	6:  _HTTPVerbTypeName[27:34],
	7:  _HTTPVerbTypeName[34:39],
	8:  _HTTPVerbTypeName[39:44],
	9:  _HTTPVerbTypeName[44:51],
	10: _HTTPVerbTypeName[51:61],
}

// String implements the Stringer interface.
func (x HTTPVerbType) String() string {
	if str, ok := _HTTPVerbTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("HTTPVerbType(%d)", x)
}

var _HTTPVerbTypeValue = map[string]HTTPVerbType{
	_HTTPVerbTypeName[0:3]:                    0,
	strings.ToLower(_HTTPVerbTypeName[0:3]):   0,
	_HTTPVerbTypeName[3:7]:                    1,
	strings.ToLower(_HTTPVerbTypeName[3:7]):   1,
	_HTTPVerbTypeName[7:11]:                   2,
	strings.ToLower(_HTTPVerbTypeName[7:11]):  2,
	_HTTPVerbTypeName[11:14]:                  3,
	strings.ToLower(_HTTPVerbTypeName[11:14]): 3,
	_HTTPVerbTypeName[14:20]:                  4,
	strings.ToLower(_HTTPVerbTypeName[14:20]): 4,
	_HTTPVerbTypeName[20:27]:                  5,
	strings.ToLower(_HTTPVerbTypeName[20:27]): 5,
	_HTTPVerbTypeName[27:34]:                  6,
	strings.ToLower(_HTTPVerbTypeName[27:34]): 6,
	_HTTPVerbTypeName[34:39]:                  7,
	strings.ToLower(_HTTPVerbTypeName[34:39]): 7,
	_HTTPVerbTypeName[39:44]:                  8,
	strings.ToLower(_HTTPVerbTypeName[39:44]): 8,
	_HTTPVerbTypeName[44:51]:                  9,
	strings.ToLower(_HTTPVerbTypeName[44:51]): 9,
	_HTTPVerbTypeName[51:61]:                  10,
	strings.ToLower(_HTTPVerbTypeName[51:61]): 10,
}

// ParseHTTPVerbType attempts to convert a string to a HTTPVerbType
func ParseHTTPVerbType(name string) (HTTPVerbType, error) {
	if x, ok := _HTTPVerbTypeValue[name]; ok {
		return x, nil
	}
	return HTTPVerbType(0), fmt.Errorf("%s is not a valid HTTPVerbType", name)
}

// MarshalText implements the text marshaller method
func (x *HTTPVerbType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *HTTPVerbType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseHTTPVerbType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
