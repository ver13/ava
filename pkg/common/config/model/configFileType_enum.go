// Code generated by go-enum
// DO NOT EDIT!

package model

import (
	"fmt"
	"strings"

	errorConfigAVA "github.com/ver13/ava/pkg/common/config/error"
	errorAVA "github.com/ver13/ava/pkg/common/error"
)

const (
	// ConfigFileTypeJson is a ConfigFileType of type Json
	ConfigFileTypeJson ConfigFileType = iota
	// ConfigFileTypeToml is a ConfigFileType of type Toml
	ConfigFileTypeToml
	// ConfigFileTypeYaml is a ConfigFileType of type Yaml
	ConfigFileTypeYaml
	// ConfigFileTypeYml is a ConfigFileType of type Yml
	ConfigFileTypeYml
	// ConfigFileTypeXml is a ConfigFileType of type Xml
	ConfigFileTypeXml
	// ConfigFileTypeProperties is a ConfigFileType of type Properties
	ConfigFileTypeProperties
	// ConfigFileTypeProps is a ConfigFileType of type Props
	ConfigFileTypeProps
	// ConfigFileTypeProp is a ConfigFileType of type Prop
	ConfigFileTypeProp
	// ConfigFileTypeEnv is a ConfigFileType of type Env
	ConfigFileTypeEnv
	// ConfigFileTypeDotenv is a ConfigFileType of type Dotenv
	ConfigFileTypeDotenv
	// ConfigFileTypeUnknown is a ConfigFileType of type Unknown
	ConfigFileTypeUnknown
)

const _ConfigFileTypeName = "JsonTomlYamlYmlXmlPropertiesPropsPropEnvDotenvUnknown"

var _ConfigFileTypeMap = map[ConfigFileType]string{
	0:  _ConfigFileTypeName[0:4],
	1:  _ConfigFileTypeName[4:8],
	2:  _ConfigFileTypeName[8:12],
	3:  _ConfigFileTypeName[12:15],
	4:  _ConfigFileTypeName[15:18],
	5:  _ConfigFileTypeName[18:28],
	6:  _ConfigFileTypeName[28:33],
	7:  _ConfigFileTypeName[33:37],
	8:  _ConfigFileTypeName[37:40],
	9:  _ConfigFileTypeName[40:46],
	10: _ConfigFileTypeName[46:53],
}

// String implements the Stringer interface.
func (x ConfigFileType) String() string {
	if str, ok := _ConfigFileTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ConfigFileType(%d)", x)
}

var _ConfigFileTypeValue = map[string]ConfigFileType{
	_ConfigFileTypeName[0:4]:                    0,
	strings.ToLower(_ConfigFileTypeName[0:4]):   0,
	_ConfigFileTypeName[4:8]:                    1,
	strings.ToLower(_ConfigFileTypeName[4:8]):   1,
	_ConfigFileTypeName[8:12]:                   2,
	strings.ToLower(_ConfigFileTypeName[8:12]):  2,
	_ConfigFileTypeName[12:15]:                  3,
	strings.ToLower(_ConfigFileTypeName[12:15]): 3,
	_ConfigFileTypeName[15:18]:                  4,
	strings.ToLower(_ConfigFileTypeName[15:18]): 4,
	_ConfigFileTypeName[18:28]:                  5,
	strings.ToLower(_ConfigFileTypeName[18:28]): 5,
	_ConfigFileTypeName[28:33]:                  6,
	strings.ToLower(_ConfigFileTypeName[28:33]): 6,
	_ConfigFileTypeName[33:37]:                  7,
	strings.ToLower(_ConfigFileTypeName[33:37]): 7,
	_ConfigFileTypeName[37:40]:                  8,
	strings.ToLower(_ConfigFileTypeName[37:40]): 8,
	_ConfigFileTypeName[40:46]:                  9,
	strings.ToLower(_ConfigFileTypeName[40:46]): 9,
	_ConfigFileTypeName[46:53]:                  10,
	strings.ToLower(_ConfigFileTypeName[46:53]): 10,
}

// ParseConfigFileType attempts to convert a string to a ConfigFileType
func ParseConfigFileType(name string) (ConfigFileType, *errorAVA.Error) {
	if x, ok := _ConfigFileTypeValue[name]; ok {
		return x, nil
	}
	return ConfigFileTypeUnknown, errorConfigAVA.ConfigFileTypeUnknown(nil, fmt.Sprintf("%s is not a valid config file type.", name))
}

// MarshalText implements the text marshaller method
func (x ConfigFileType) MarshalText() ([]byte, *errorAVA.Error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x ConfigFileType) UnmarshalText(text []byte) (ConfigFileType, *errorAVA.Error) {
	name := string(text)
	tmp, err := ParseConfigFileType(name)
	if err != nil {
		return ConfigFileTypeUnknown, err
	}
	x = tmp
	return tmp, nil
}
