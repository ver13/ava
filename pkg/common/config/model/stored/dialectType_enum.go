// Code generated by go-enum
// DO NOT EDIT!

package stored

import (
	"fmt"
	"strings"

	errorConfigAVA "github.com/ver13/ava/pkg/common/config/error"
	errorAVA "github.com/ver13/ava/pkg/common/error"
)

const (
	// DialectTypePostgreSQL is a DialectType of type PostgreSQL
	DialectTypePostgreSQL DialectType = iota
	// DialectTypeSqlite3 is a DialectType of type Sqlite3
	DialectTypeSqlite3
	// DialectTypeMySQL is a DialectType of type MySQL
	DialectTypeMySQL
	// DialectTypeSQLServer is a DialectType of type SQLServer
	DialectTypeSQLServer
	// DialectTypeUnknown is a DialectType of type Unknown
	DialectTypeUnknown
)

const _DialectTypeName = "PostgreSQLSqlite3MySQLSQLServerUnknown"

var _DialectTypeMap = map[DialectType]string{
	0: _DialectTypeName[0:10],
	1: _DialectTypeName[10:17],
	2: _DialectTypeName[17:22],
	3: _DialectTypeName[22:31],
	4: _DialectTypeName[31:38],
}

// String implements the Stringer interface.
func (x DialectType) String() string {
	if str, ok := _DialectTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DialectType(%d)", x)
}

var _DialectTypeValue = map[string]DialectType{
	_DialectTypeName[0:10]:                   0,
	strings.ToLower(_DialectTypeName[0:10]):  0,
	_DialectTypeName[10:17]:                  1,
	strings.ToLower(_DialectTypeName[10:17]): 1,
	_DialectTypeName[17:22]:                  2,
	strings.ToLower(_DialectTypeName[17:22]): 2,
	_DialectTypeName[22:31]:                  3,
	strings.ToLower(_DialectTypeName[22:31]): 3,
	_DialectTypeName[31:38]:                  4,
	strings.ToLower(_DialectTypeName[31:38]): 4,
}

// ParseDialectType attempts to convert a string to a DialectType
func ParseDialectType(name string) (DialectType, *errorAVA.Error) {
	if x, ok := _DialectTypeValue[name]; ok {
		return x, nil
	}
	return DialectTypeUnknown, errorConfigAVA.DialectTypeUnknown(nil, fmt.Sprintf("%s is not a valid dialect type.", name))
}

// MarshalText implements the text marshaller method
func (x DialectType) MarshalText() ([]byte, *errorAVA.Error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x DialectType) UnmarshalText(text []byte) (DialectType, *errorAVA.Error) {
	name := string(text)
	tmp, err := ParseDialectType(name)
	if err != nil {
		return DialectTypeUnknown, err
	}
	x = tmp
	return tmp, nil
}
