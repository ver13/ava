// Code generated by go-enum
// DO NOT EDIT!

package stored

import (
	"fmt"
	"strings"

	errorConfigAVA "github.com/ver13/ava/pkg/common/config/error"
	errorAVA "github.com/ver13/ava/pkg/common/error"
)

const (
	// SSLTypeEnable is a SSLType of type Enable
	SSLTypeEnable SSLType = iota
	// SSLTypeDisable is a SSLType of type Disable
	SSLTypeDisable
	// SSLTypeUnknown is a SSLType of type Unknown
	SSLTypeUnknown
)

const _SSLTypeName = "EnableDisableUnknown"

var _SSLTypeMap = map[SSLType]string{
	0: _SSLTypeName[0:6],
	1: _SSLTypeName[6:13],
	2: _SSLTypeName[13:20],
}

// String implements the Stringer interface.
func (x SSLType) String() string {
	if str, ok := _SSLTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SSLType(%d)", x)
}

var _SSLTypeValue = map[string]SSLType{
	_SSLTypeName[0:6]:                    0,
	strings.ToLower(_SSLTypeName[0:6]):   0,
	_SSLTypeName[6:13]:                   1,
	strings.ToLower(_SSLTypeName[6:13]):  1,
	_SSLTypeName[13:20]:                  2,
	strings.ToLower(_SSLTypeName[13:20]): 2,
}

// ParseSSLType attempts to convert a string to a SSLType
func ParseSSLType(name string) (SSLType, *errorAVA.Error) {
	if x, ok := _SSLTypeValue[name]; ok {
		return x, nil
	}
	return SSLTypeUnknown, errorConfigAVA.SSLTypeUnknown(nil, fmt.Sprintf("%s is not a valid SSLType", name))
}

// MarshalText implements the text marshaller method
func (x SSLType) MarshalText() ([]byte, *errorAVA.Error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x SSLType) UnmarshalText(text []byte) (SSLType, *errorAVA.Error) {
	name := string(text)
	tmp, err := ParseSSLType(name)
	if err != nil {
		return SSLTypeUnknown, err
	}
	x = tmp
	return tmp, nil
}
