// code generated by go-enum
// DO NOT EDIT!

package serializer

import (
	"fmt"
	"strings"

	errorAVA "github.com/ver13/ava/pkg/common/error"
	errorSerializerAVA "github.com/ver13/ava/pkg/common/serializer/error"
)

const (
	// SerializerTypeJson is a SerializerType of type Json
	SerializerTypeJson SerializerType = iota
	// SerializerTypeXml is a SerializerType of type Xml
	SerializerTypeXml
	// SerializerTypeYaml is a SerializerType of type Yaml
	SerializerTypeYaml
	// SerializerTypeToml is a SerializerType of type Toml
	SerializerTypeToml
	// SerializerTypeHcl is a SerializerType of type Hcl
	SerializerTypeHcl
	// SerializerTypeProto is a SerializerType of type Proto
	SerializerTypeProto
	// SerializerTypeUnknown is a SerializerType of type Unknown
	SerializerTypeUnknown
)

const _SerializerTypeName = "jsonxmlyamltomlhclprotounknown"

var _SerializerTypeMap = map[SerializerType]string{
	0: _SerializerTypeName[0:4],
	1: _SerializerTypeName[4:7],
	2: _SerializerTypeName[7:11],
	3: _SerializerTypeName[11:15],
	4: _SerializerTypeName[15:18],
	5: _SerializerTypeName[18:23],
	6: _SerializerTypeName[23:30],
}

// String implements the Stringer interface.
func (x SerializerType) String() string {
	if str, ok := _SerializerTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SerializerType(%d)", x)
}

var _SerializerTypeValue = map[string]SerializerType{
	_SerializerTypeName[0:4]:                    0,
	strings.ToLower(_SerializerTypeName[0:4]):   0,
	_SerializerTypeName[4:7]:                    1,
	strings.ToLower(_SerializerTypeName[4:7]):   1,
	_SerializerTypeName[7:11]:                   2,
	strings.ToLower(_SerializerTypeName[7:11]):  2,
	_SerializerTypeName[11:15]:                  3,
	strings.ToLower(_SerializerTypeName[11:15]): 3,
	_SerializerTypeName[15:18]:                  4,
	strings.ToLower(_SerializerTypeName[15:18]): 4,
	_SerializerTypeName[18:23]:                  5,
	strings.ToLower(_SerializerTypeName[18:23]): 5,
	_SerializerTypeName[23:30]:                  6,
	strings.ToLower(_SerializerTypeName[23:30]): 6,
}

// ParseSerializerType attempts to convert a string to a SerializerType
func ParseSerializerType(name string) (SerializerType, *errorAVA.Error) {
	if x, ok := _SerializerTypeValue[name]; ok {
		return x, nil
	}
	return SerializerTypeUnknown, errorSerializerAVA.SerializerUnknown(nil, fmt.Sprintf("%s is not a valid serializer type", name))
}

// MarshalText implements the text marshaller method
func (x SerializerType) MarshalText() ([]byte, *errorAVA.Error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x SerializerType) UnmarshalText(text []byte) (SerializerType, *errorAVA.Error) {
	name := string(text)
	var err *errorAVA.Error
	var tmp SerializerType = SerializerTypeUnknown
	if tmp, err = ParseSerializerType(name); err != nil {
		return SerializerTypeUnknown, err
	}
	x = tmp
	return x, nil
}
