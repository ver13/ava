// Code generated by go-enum
// DO NOT EDIT!

package version

import (
	"fmt"
	"strings"

	errorAVA "github.com/ver13/ava/pkg/common/error"
	errorVersionAVA "github.com/ver13/ava/pkg/common/version/error"
)

const (
	// WildcardTypeENUM is a WildcardType of type ENUM(
	WildcardTypeENUM WildcardType = iota
	// WildcardTypeNone is a WildcardType of type None
	WildcardTypeNone
	// WildcardTypeMajor is a WildcardType of type Major
	WildcardTypeMajor
	// WildcardTypeMinor is a WildcardType of type Minor
	WildcardTypeMinor
	// WildcardTypePatch is a WildcardType of type Patch
	WildcardTypePatch
	// WildcardTypeUnknown is a WildcardType of type Unknown
	WildcardTypeUnknown
)

const _WildcardTypeName = "ENUM(NoneMajorMinorPatchUnknown"

var _WildcardTypeMap = map[WildcardType]string{
	0: _WildcardTypeName[0:5],
	1: _WildcardTypeName[5:9],
	2: _WildcardTypeName[9:14],
	3: _WildcardTypeName[14:19],
	4: _WildcardTypeName[19:24],
	5: _WildcardTypeName[24:31],
}

// String implements the Stringer interface.
func (x WildcardType) String() string {
	if str, ok := _WildcardTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("WildcardType(%d)", x)
}

var _WildcardTypeValue = map[string]WildcardType{
	_WildcardTypeName[0:5]:                    0,
	strings.ToLower(_WildcardTypeName[0:5]):   0,
	_WildcardTypeName[5:9]:                    1,
	strings.ToLower(_WildcardTypeName[5:9]):   1,
	_WildcardTypeName[9:14]:                   2,
	strings.ToLower(_WildcardTypeName[9:14]):  2,
	_WildcardTypeName[14:19]:                  3,
	strings.ToLower(_WildcardTypeName[14:19]): 3,
	_WildcardTypeName[19:24]:                  4,
	strings.ToLower(_WildcardTypeName[19:24]): 4,
	_WildcardTypeName[24:31]:                  5,
	strings.ToLower(_WildcardTypeName[24:31]): 5,
}

// WildcardTypeType attempts to convert a string to a SerializerType
func WildcardTypeType(name string) (WildcardType, *errorAVA.Error) {
	if x, ok := _WildcardTypeValue[name]; ok {
		return x, nil
	}
	return WildcardTypeUnknown, errorVersionAVA.WildcardUnknown(nil, fmt.Sprintf("%s is not a valid wildcard type", name))
}

// MarshalText implements the text marshaller method
func (x WildcardType) MarshalText() ([]byte, *errorAVA.Error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x WildcardType) UnmarshalText(text []byte) (WildcardType, *errorAVA.Error) {
	name := string(text)
	var err *errorAVA.Error
	var tmp WildcardType = WildcardTypeUnknown
	if tmp, err = WildcardTypeType(name); err != nil {
		return WildcardTypeUnknown, err
	}
	x = tmp
	return x, nil
}
