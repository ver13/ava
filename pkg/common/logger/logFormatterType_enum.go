// Code generated by go-enum
// DO NOT EDIT!

package logger

import (
	"fmt"
	"strings"

	errorAVA "github.com/ver13/ava/pkg/common/error"
	errorLoggerAVA "github.com/ver13/ava/pkg/common/logger/error"
)

const (
	// LogFormatterTypeText is a LogFormatterType of type Text
	LogFormatterTypeText LogFormatterType = iota
	// LogFormatterTypeJSON is a LogFormatterType of type JSON
	LogFormatterTypeJSON
	// LogFormatterTypeApacheCommonLog is a LogFormatterType of type ApacheCommonLog
	LogFormatterTypeApacheCommonLog
	// LogFormatterTypeApacheCombinedLog is a LogFormatterType of type ApacheCombinedLog
	LogFormatterTypeApacheCombinedLog
	// LogFormatterTypeApacheErrorLog is a LogFormatterType of type ApacheErrorLog
	LogFormatterTypeApacheErrorLog
	// LogFormatterTypeRFC3164Log is a LogFormatterType of type RFC3164Log
	LogFormatterTypeRFC3164Log
	// LogFormatterTypeRFC5424Log is a LogFormatterType of type RFC5424Log
	LogFormatterTypeRFC5424Log
	// LogFormatterTypeCommonLogFileFormat is a LogFormatterType of type CommonLogFileFormat
	LogFormatterTypeCommonLogFileFormat
	// LogFormatterTypeUnknown is a LogFormatterType of type Unknown
	LogFormatterTypeUnknown
)

const _LogFormatterTypeName = "TextJSONApacheCommonLogApacheCombinedLogApacheErrorLogRFC3164LogRFC5424LogCommonLogFileFormatUnknown"

var _LogFormatterTypeMap = map[LogFormatterType]string{
	0: _LogFormatterTypeName[0:4],
	1: _LogFormatterTypeName[4:8],
	2: _LogFormatterTypeName[8:23],
	3: _LogFormatterTypeName[23:40],
	4: _LogFormatterTypeName[40:54],
	5: _LogFormatterTypeName[54:64],
	6: _LogFormatterTypeName[64:74],
	7: _LogFormatterTypeName[74:93],
	8: _LogFormatterTypeName[93:100],
}

// String implements the Stringer interface.
func (x LogFormatterType) String() string {
	if str, ok := _LogFormatterTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("LogFormatterType(%d)", x)
}

var _LogFormatterTypeValue = map[string]LogFormatterType{
	_LogFormatterTypeName[0:4]:                     0,
	strings.ToLower(_LogFormatterTypeName[0:4]):    0,
	_LogFormatterTypeName[4:8]:                     1,
	strings.ToLower(_LogFormatterTypeName[4:8]):    1,
	_LogFormatterTypeName[8:23]:                    2,
	strings.ToLower(_LogFormatterTypeName[8:23]):   2,
	_LogFormatterTypeName[23:40]:                   3,
	strings.ToLower(_LogFormatterTypeName[23:40]):  3,
	_LogFormatterTypeName[40:54]:                   4,
	strings.ToLower(_LogFormatterTypeName[40:54]):  4,
	_LogFormatterTypeName[54:64]:                   5,
	strings.ToLower(_LogFormatterTypeName[54:64]):  5,
	_LogFormatterTypeName[64:74]:                   6,
	strings.ToLower(_LogFormatterTypeName[64:74]):  6,
	_LogFormatterTypeName[74:93]:                   7,
	strings.ToLower(_LogFormatterTypeName[74:93]):  7,
	_LogFormatterTypeName[93:100]:                  8,
	strings.ToLower(_LogFormatterTypeName[93:100]): 8,
}

// ParseLogFormatterType attempts to convert a string to a LogFormatterType
func ParseLogFormatterType(name string) (LogFormatterType, *errorAVA.Error) {
	if x, ok := _LogFormatterTypeValue[name]; ok {
		return x, nil
	}
	return LogFormatterTypeUnknown, errorLoggerAVA.FormatterUnknown(nil, name)
}

// MarshalText implements the text marshaller method
func (x LogFormatterType) MarshalText() ([]byte, *errorAVA.Error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x LogFormatterType) UnmarshalText(text []byte) (LogFormatterType, *errorAVA.Error) {
	name := string(text)
	tmp, err := ParseLogFormatterType(name)
	if err != nil {
		return LogFormatterTypeUnknown, err
	}
	x = tmp
	return tmp, nil
}
