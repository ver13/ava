// Code generated by go-enum
// DO NOT EDIT!

package codec

import (
	"fmt"
	"strings"

	errorCodecAVA "github.com/ver13/ava/pkg/common/codec/error"
	errorAVA "github.com/ver13/ava/pkg/common/error"
)

const (
	// MessageTypeError is a MessageType of type Error
	MessageTypeError MessageType = iota
	// MessageTypeRequest is a MessageType of type Request
	MessageTypeRequest
	// MessageTypeResponse is a MessageType of type Response
	MessageTypeResponse
	// MessageTypeEvent is a MessageType of type Event
	MessageTypeEvent
	// MessageTypeUnknown is a MessageType of type Unknown
	MessageTypeUnknown
)

const _MessageTypeName = "ErrorRequestResponseEventUnknown"

var _MessageTypeMap = map[MessageType]string{
	0: _MessageTypeName[0:5],
	1: _MessageTypeName[5:12],
	2: _MessageTypeName[12:20],
	3: _MessageTypeName[20:25],
	4: _MessageTypeName[25:32],
}

// String implements the Stringer interface.
func (x MessageType) String() string {
	if str, ok := _MessageTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("MessageType(%d)", x)
}

var _MessageTypeValue = map[string]MessageType{
	_MessageTypeName[0:5]:                    0,
	strings.ToLower(_MessageTypeName[0:5]):   0,
	_MessageTypeName[5:12]:                   1,
	strings.ToLower(_MessageTypeName[5:12]):  1,
	_MessageTypeName[12:20]:                  2,
	strings.ToLower(_MessageTypeName[12:20]): 2,
	_MessageTypeName[20:25]:                  3,
	strings.ToLower(_MessageTypeName[20:25]): 3,
	_MessageTypeName[25:32]:                  4,
	strings.ToLower(_MessageTypeName[25:32]): 4,
}

// ParseMessage attempts to convert a string to a Message
func ParseMessage(name string) (MessageType, *errorAVA.Error) {
	if x, ok := _MessageTypeValue[name]; ok {
		return x, nil
	}
	return MessageTypeUnknown, errorCodecAVA.MessageTypeUnknown(nil, fmt.Errorf("%s is not a valid Message", name))
}

// MarshalText implements the text marshaller method
func (x MessageType) MarshalText() ([]byte, *errorAVA.Error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x MessageType) UnmarshalText(text []byte) (MessageType, *errorAVA.Error) {
	name := string(text)
	tmp, err := ParseMessage(name)
	if err != nil {
		return MessageTypeUnknown, err
	}
	x = tmp
	return tmp, nil
}
