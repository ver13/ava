// Code generated by go-enum
// DO NOT EDIT!

package error

import (
	"fmt"
	"strings"
)

const (
	// SubgroupGeneral is a Subgroup of type General
	SubgroupGeneral Subgroup = iota
	// SubgroupDiscoveryService is a Subgroup of type DiscoveryService
	SubgroupDiscoveryService
	// SubgroupBrokerService is a Subgroup of type BrokerService
	SubgroupBrokerService
	// SubgroupCircuitBreakerService is a Subgroup of type CircuitBreakerService
	SubgroupCircuitBreakerService
	// SubgroupMetricsService is a Subgroup of type MetricsService
	SubgroupMetricsService
	// SubgroupClient is a Subgroup of type Client
	SubgroupClient
	// SubgroupServer is a Subgroup of type Server
	SubgroupServer
	// SubgroupSelected is a Subgroup of type Selected
	SubgroupSelected
	// SubgroupSerializer is a Subgroup of type Serializer
	SubgroupSerializer
	// SubgroupHash is a Subgroup of type Hash
	SubgroupHash
	// SubgroupQR is a Subgroup of type QR
	SubgroupQR
	// SubgroupVersion is a Subgroup of type Version
	SubgroupVersion
	// SubgroupConfig is a Subgroup of type Config
	SubgroupConfig
	// SubgroupTime is a Subgroup of type Time
	SubgroupTime
	// SubgroupValidator is a Subgroup of type Validator
	SubgroupValidator
	// SubgroupString is a Subgroup of type String
	SubgroupString
	// SubgroupLogger is a Subgroup of type Logger
	SubgroupLogger
	// SubgroupFile is a Subgroup of type File
	SubgroupFile
	// SubgroupGRPC is a Subgroup of type GRPC
	SubgroupGRPC
	// SubgroupNET is a Subgroup of type NET
	SubgroupNET
	// SubgroupURL is a Subgroup of type URL
	SubgroupURL
	// SubgroupCodec is a Subgroup of type Codec
	SubgroupCodec
	// SubgroupEvent is a Subgroup of type Event
	SubgroupEvent
	// SubgroupAVAEnum is a Subgroup of type AVAEnum
	SubgroupAVAEnum
	// SubgroupUnknown is a Subgroup of type Unknown
	SubgroupUnknown
)

const _SubgroupName = "GeneralDiscoveryServiceBrokerServiceCircuitBreakerServiceMetricsServiceClientServerSelectedSerializerHashQRVersionConfigTimeValidatorStringLoggerFileGRPCNETURLCodecEventAVAEnumUnknown"

var _SubgroupMap = map[Subgroup]string{
	0:  _SubgroupName[0:7],
	1:  _SubgroupName[7:23],
	2:  _SubgroupName[23:36],
	3:  _SubgroupName[36:57],
	4:  _SubgroupName[57:71],
	5:  _SubgroupName[71:77],
	6:  _SubgroupName[77:83],
	7:  _SubgroupName[83:91],
	8:  _SubgroupName[91:101],
	9:  _SubgroupName[101:105],
	10: _SubgroupName[105:107],
	11: _SubgroupName[107:114],
	12: _SubgroupName[114:120],
	13: _SubgroupName[120:124],
	14: _SubgroupName[124:133],
	15: _SubgroupName[133:139],
	16: _SubgroupName[139:145],
	17: _SubgroupName[145:149],
	18: _SubgroupName[149:153],
	19: _SubgroupName[153:156],
	20: _SubgroupName[156:159],
	21: _SubgroupName[159:164],
	22: _SubgroupName[164:169],
	23: _SubgroupName[169:176],
	24: _SubgroupName[176:183],
}

// String implements the Stringer interface.
func (x Subgroup) String() string {
	if str, ok := _SubgroupMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Subgroup(%d)", x)
}

var _SubgroupValue = map[string]Subgroup{
	_SubgroupName[0:7]:                      0,
	strings.ToLower(_SubgroupName[0:7]):     0,
	_SubgroupName[7:23]:                     1,
	strings.ToLower(_SubgroupName[7:23]):    1,
	_SubgroupName[23:36]:                    2,
	strings.ToLower(_SubgroupName[23:36]):   2,
	_SubgroupName[36:57]:                    3,
	strings.ToLower(_SubgroupName[36:57]):   3,
	_SubgroupName[57:71]:                    4,
	strings.ToLower(_SubgroupName[57:71]):   4,
	_SubgroupName[71:77]:                    5,
	strings.ToLower(_SubgroupName[71:77]):   5,
	_SubgroupName[77:83]:                    6,
	strings.ToLower(_SubgroupName[77:83]):   6,
	_SubgroupName[83:91]:                    7,
	strings.ToLower(_SubgroupName[83:91]):   7,
	_SubgroupName[91:101]:                   8,
	strings.ToLower(_SubgroupName[91:101]):  8,
	_SubgroupName[101:105]:                  9,
	strings.ToLower(_SubgroupName[101:105]): 9,
	_SubgroupName[105:107]:                  10,
	strings.ToLower(_SubgroupName[105:107]): 10,
	_SubgroupName[107:114]:                  11,
	strings.ToLower(_SubgroupName[107:114]): 11,
	_SubgroupName[114:120]:                  12,
	strings.ToLower(_SubgroupName[114:120]): 12,
	_SubgroupName[120:124]:                  13,
	strings.ToLower(_SubgroupName[120:124]): 13,
	_SubgroupName[124:133]:                  14,
	strings.ToLower(_SubgroupName[124:133]): 14,
	_SubgroupName[133:139]:                  15,
	strings.ToLower(_SubgroupName[133:139]): 15,
	_SubgroupName[139:145]:                  16,
	strings.ToLower(_SubgroupName[139:145]): 16,
	_SubgroupName[145:149]:                  17,
	strings.ToLower(_SubgroupName[145:149]): 17,
	_SubgroupName[149:153]:                  18,
	strings.ToLower(_SubgroupName[149:153]): 18,
	_SubgroupName[153:156]:                  19,
	strings.ToLower(_SubgroupName[153:156]): 19,
	_SubgroupName[156:159]:                  20,
	strings.ToLower(_SubgroupName[156:159]): 20,
	_SubgroupName[159:164]:                  21,
	strings.ToLower(_SubgroupName[159:164]): 21,
	_SubgroupName[164:169]:                  22,
	strings.ToLower(_SubgroupName[164:169]): 22,
	_SubgroupName[169:176]:                  23,
	strings.ToLower(_SubgroupName[169:176]): 23,
	_SubgroupName[176:183]:                  24,
	strings.ToLower(_SubgroupName[176:183]): 24,
}

// ParseSubgroup attempts to convert a string to a Subgroup
func ParseSubgroup(name string) (Subgroup, *Error) {
	if x, ok := _SubgroupValue[name]; ok {
		return x, nil
	}
	return SubgroupUnknown, SubgroupTypeUnknown(nil, fmt.Errorf("%s is not a valid Subgroup", name))
}

// MarshalText implements the text marshaller method
func (x Subgroup) MarshalText() ([]byte, *Error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x Subgroup) UnmarshalText(text []byte) (Subgroup, *Error) {
	name := string(text)
	tmp, err := ParseSubgroup(name)
	if err != nil {
		return SubgroupUnknown, err
	}
	x = tmp
	return tmp, nil
}
