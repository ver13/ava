// Code generated by go-enum
// DO NOT EDIT!

package registry

import (
	"fmt"
	"strings"

	errorAVA "github.com/ver13/ava/pkg/common/error"
	errorRegistryAVA "github.com/ver13/ava/pkg/registry/error"
)

const (
	// EventTypeCreate is a EventType of type Create
	// Create is emitted when a new service is registered
	EventTypeCreate EventType = iota
	// EventTypeDelete is a EventType of type Delete
	// Delete is emitted when an existing service is deregsitered
	EventTypeDelete
	// EventTypeUpdate is a EventType of type Update
	// Update is emitted when an existing servicec is updated
	EventTypeUpdate
	// EventTypeUnknown is a EventType of type Unknown
	EventTypeUnknown
)

const _EventTypeName = "CreateDeleteUpdateUnknown"

var _EventTypeMap = map[EventType]string{
	0: _EventTypeName[0:6],
	1: _EventTypeName[6:12],
	2: _EventTypeName[12:18],
	3: _EventTypeName[18:25],
}

// String implements the Stringer interface.
func (x EventType) String() string {
	if str, ok := _EventTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EventType(%d)", x)
}

var _EventTypeValue = map[string]EventType{
	_EventTypeName[0:6]:                    0,
	strings.ToLower(_EventTypeName[0:6]):   0,
	_EventTypeName[6:12]:                   1,
	strings.ToLower(_EventTypeName[6:12]):  1,
	_EventTypeName[12:18]:                  2,
	strings.ToLower(_EventTypeName[12:18]): 2,
	_EventTypeName[18:25]:                  3,
	strings.ToLower(_EventTypeName[18:25]): 3,
}

// ParseMessage attempts to convert a string to a Message
func ParseMessage(name string) (EventType, *errorAVA.Error) {
	if x, ok := _EventTypeValue[name]; ok {
		return x, nil
	}
	return EventTypeUnknown, errorRegistryAVA.EventTypeUnknown(nil, fmt.Errorf("%s is not a valid Message", name))
}

// MarshalText implements the text marshaller method
func (x EventType) MarshalText() ([]byte, *errorAVA.Error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x EventType) UnmarshalText(text []byte) (EventType, *errorAVA.Error) {
	name := string(text)
	tmp, err := ParseMessage(name)
	if err != nil {
		return EventTypeUnknown, err
	}
	x = tmp
	return tmp, nil
}
