// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (3.312kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x00\x29\x53\xe4\x0c\x7b\xeb\xe0\xa7\xb6\x0b\x3a\x20\x4d\x81\x64\x7b\x09\x82\x80\x91\x4e\x36\x11\x89\x52\x49\x5a\xb5\xa1\xe9\xbb\x0f\x47\x52\x32\xad\xc8\xe9\x1e\xd6\x17\xc3\xe2\xfd\xff\xdd\xef\x8e\xec\xba\x4b\xc8\xb1\xe0\x02\x21\xdc\x20\xcb\x51\x86\x7d\x1f\x2c\x97\xf0\xa1\xce\x11\xd6\x28\x50\x32\x8d\x39\x3c\xef\x81\xb5\xec\x12\xc5\xb6\x22\xe9\xc7\x5b\xf8\x72\x7b\x0f\x9f\x3e\x7e\xbe\x7f\x17\x04\x0d\xcb\x5e\xd8\x1a\xa1\xeb\x52\xf7\xb7\xef\x83\x80\x57\x4d\x2d\x35\x44\x01\x00\x40\x58\x54\x3a\x0c\xe2\xa0\xeb\x50\xe4\x70\x49\x72\x3f\x34\xf9\xa5\xc0\x59\x2d\x14\x99\x90\xec\x8c\x0e\xbf\xb0\x0a\xe1\xfd\x0a\x52\xfa\x48\xcd\x17\x19\x1b\x79\xcb\xa4\x22\x59\xce\x33\x0d\x61\xc9\x94\xae\x8b\x42\xa1\x0e\xe1\xca\x29\x81\x64\x62\x8d\x70\x26\x3f\x8b\x1c\x77\x09\x99\x94\x5b\xcf\xdf\xdf\xf4\xa9\xa0\xef\x83\x85\xf1\x48\x3e\x6e\x8d\x0f\xd2\x69\xca\x6d\xf6\x72\xec\xd8\xc6\xfc\x07\x0a\x2e\x95\x86\xbe\xef\x3a\x38\xab\x47\x03\xb5\x7d\x76\x21\xac\xe7\x21\xb0\x0b\x00\xbc\x00\xfc\x36\x68\x98\x5a\xc2\xa7\xb0\xef\x97\x4b\xb8\x7b\xe1\x4d\x83\x39\x18\x51\xd7\x61\xa9\xd0\x9c\x77\x9d\xd3\xfe\x2a\xb1\xe0\x3b\xcc\xc9\xaa\xef\x81\x2b\x60\x24\x1c\x20\xea\x7b\xa8\x0b\xd0\xfb\x06\x0f\x26\xf6\xdc\x00\x3e\x14\xc8\x8b\x21\xfa\x87\xba\xaa\x50\x68\x12\xf8\x61\xbc\x63\xd2\xb7\xa6\xd4\xbf\x53\x89\x1c\xaa\x72\xa5\x5e\x19\x54\xfc\xc4\x56\xc0\x6b\xcd\xac\xa2\x40\xb8\x1a\x11\xeb\x7b\xf8\x05\x3c\x04\xc7\x64\x2d\x00\x4e\xdf\x6f\x8a\xaf\xf9\x3a\xc4\x49\x6f\x67\x4f\xa6\x3b\xe4\xc0\xf4\xef\xb8\xa5\xf6\x8f\x23\x95\xad\x38\x26\x76\x82\xc6\xaa\x29\x99\x46\x08\x95\x96\x5c\xac\x51\x86\x90\x52\x2f\x69\x02\xbe\x32\xa9\xb0\xeb\x0e\xbc\xec\x7b\x60\x9a\x4c\xb4\x02\x5d\x43\x56\x8b\x16\xa5\x06\x06\xd6\x98\xce\xa8\x65\xbe\x41\x50\x6c\x45\x36\xe7\x29\x12\x44\x0e\x6b\x18\x43\x74\x2c\x4c\x00\xa5\xac\x65\x0c\x5d\xb0\xe0\x05\xec\x12\xa8\x5f\xa8\xbe\xa7\x63\x35\xc3\xc0\x07\x72\xf4\xf8\x3b\x69\x74\xc1\x62\x21\x51\x6f\xa5\x20\x13\xc1\xcb\x60\x61\xba\xcc\x0b\x48\x49\x4b\x99\x99\x19\x54\x26\xf9\x5c\xc5\x09\x14\x95\x4e\x3f\x51\xe4\x22\x0a\xcf\x15\x51\x50\xd4\x54\x5f\xcb\x4a\x9e\xc3\x34\x47\x2d\xf7\xf0\x70\xae\x1e\xc3\x04\xc8\x7b\xe2\xaa\x51\xe9\x9f\x35\x17\xd1\x24\x57\xfa\x55\x09\x84\x09\x84\x71\xec\xa8\x47\x0c\xf8\x1f\x33\x72\x79\xc4\x3e\xb1\xcd\x12\x22\x9a\xa5\x15\x93\x6a\xc3\x4a\xb0\xbb\xef\xc6\x7e\xdd\xe3\x4e\x03\xaf\x9a\x12\x69\x26\x14\xe8\x0d\x82\xa6\x33\xa7\x5d\xa2\x84\x0a\xf5\xa6\xce\x6d\x23\xa3\xdd\x24\x66\xec\x7b\x8a\x62\x88\x1e\x1e\x9f\xf7\x1a\xfd\x06\xba\xe2\xac\x20\xda\xa5\x77\x06\xa5\x28\x8e\x6d\x8b\x2c\xd7\xfe\x12\xd5\x0f\x32\xda\x8a\xd3\x39\x5d\x4c\x93\x3a\x72\x17\x19\x7b\x1b\x3f\xb6\x89\x51\x5e\xc2\xed\x5d\xdb\x35\xa3\x14\x07\x0b\x5d\x35\x26\x79\x92\x9c\xa2\x6d\x6c\x58\x49\x4a\xef\x56\x54\x83\x4f\x3c\x94\xd2\xb0\xee\x62\x07\x2b\xd0\x55\x33\xd6\x6f\x6b\x1d\x76\xd5\xd0\x15\xf5\x6d\xe8\xc8\x5d\xc6\xc4\xb4\x70\x3a\x13\x28\x81\x0b\x8d\xb2\x60\x19\xa6\xa7\x4b\x26\xdd\xc8\x2e\xff\x51\xbd\xeb\xbd\x7a\x5b\x26\xc1\x1b\xba\x20\x58\xa8\xef\x5c\x67\x1b\x68\xa9\x56\xbb\xfa\x22\xda\xaf\xa6\x6b\x19\x53\x83\xe6\xfb\x60\x61\xc1\x5a\x41\xeb\x04\x16\x4c\x4f\xe0\x40\x6c\x63\xa7\x20\x78\x49\x52\x83\xc2\x2b\x5a\x1f\xd0\x72\x33\xfa\xd3\x61\x27\x80\xed\x7d\x35\x41\x38\x97\xbc\x45\x69\x65\xb3\x38\x4f\x61\x36\x9a\x44\x74\x6b\x69\x6f\xc1\x19\xba\x1f\x78\x9e\x9c\x68\x7d\x51\xb2\xf5\xd0\x7b\x7c\xc5\xf9\xeb\xba\x64\x62\x0d\xa4\xe4\x6e\xda\x31\x39\xa0\xdc\xde\x62\x02\x6a\x22\xc2\xb8\x5c\x0f\x0c\x78\x13\xe2\x96\x95\xb1\x03\xb0\x0d\x7c\x5c\x2d\x7c\xd7\x6f\xe7\x78\x8d\x5a\xfb\x08\xfe\x28\xc9\x6b\xa4\x75\xe1\x31\xd5\xc3\xee\x62\xe7\x62\xde\xd3\x6d\x3f\x09\xba\xe6\x7a\xb3\x7d\x4e\xb3\xba\x5a\xaa\xa6\xf8\xf5\xb7\x65\xf3\x07\x01\x39\xc1\xe8\x8d\xc8\xe4\x34\x8a\x87\x3b\xeb\x10\x35\x9c\x6c\xd3\xe3\x96\xb9\x3f\x47\x4f\xba\xf1\xce\x1c\x9f\x75\x33\x4b\x1f\x56\xe4\xd9\x85\xe3\xc5\xde\xbe\xcb\x80\x02\x0c\x4c\xb0\x77\x53\xdf\xd3\x84\xce\x5d\x1b\x66\x86\x04\xab\x46\x6b\x77\x41\xcf\xa9\xda\x62\xe8\xed\x54\x72\xa5\xe9\xc9\xd4\xd4\x4a\xf1\xe7\x72\x98\x66\x3b\xe9\x8a\x24\xc7\xf6\x0e\xb2\x19\xa7\x51\x0c\x0f\x8f\x07\xbc\x74\xd5\x10\x87\x2a\xf6\x82\xd1\x70\x9e\x40\x89\xf3\x77\x1e\xdd\x76\x59\xdd\xec\x23\x33\xe2\xb3\x1a\x63\x0b\x68\x70\xcd\xa3\x76\x7c\x41\xcf\x40\x72\xc3\x1a\x03\x08\x54\xac\xf1\xf1\x34\x90\xd8\xa1\x7b\xb5\x47\x5d\xa3\xfe\xcb\x80\x0f\x63\xeb\x11\x84\x17\xf4\x71\xe2\x11\x72\xc3\x9a\x87\xdd\xab\xf7\x87\xd2\x76\x1f\xb9\x4f\xba\xc6\xef\x1a\xc9\x85\x2e\xa2\x09\xcf\xa2\xf3\x3c\x0e\x13\xd8\xc5\xc1\x7c\xb9\x96\xd8\xa6\x60\xba\x02\xbd\x92\xd3\xb2\xfe\x8e\xd2\xac\x5b\x9f\xa3\xff\x06\x00\x00\xff\xff\x19\x5e\x7c\x25\xf0\x0c\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0x7, 0xf8, 0x67, 0x7b, 0xe1, 0xcf, 0x36, 0x9, 0x2c, 0xd1, 0xfc, 0xd8, 0x5, 0xaf, 0x99, 0x54, 0x93, 0x85, 0x4c, 0x4e, 0x49, 0x6f, 0xc9, 0xc8, 0x63, 0x67, 0x36, 0x4, 0xd9, 0x83, 0x9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
